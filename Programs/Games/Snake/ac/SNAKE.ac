# -----------------------------------
# SNAKE
# COPYRIGHT (C) 2013
# ROBERT L. BOCCHINO JR.
# -----------------------------------
# MAIN LOOP
# -------------------------------------
FN MAIN() {
  INIT();
  WHILE (TRUE) {
    GET_INPUT();
    MOVE_SNAKE();
    UPDATE_NEXT_APPLE();
  }
}
# -------------------------------------
# INITIALIZE GAME STATE
# -------------------------------------
FN INIT() {
  SET_FULL_SCREEN();
  MON_HOME();
  SET_GRAPHICS();
  SET_LO_RES();
  SET_TEXT_WINDOW();
  MON_CLRTOP();
  POSITION_CURSOR(0,20);
  PRINT_STRING(SCORE_STR);
  PRINT_SCORE();  
  PRINT_INSTRUCTIONS();
  INIT_APPLE();
  INIT_SNAKE();
}

DATA NAME     "SNAKE";
DATA AUTHOR   "BY ROB BOCCHINO";
DATA TO_QUIT  "PRESS ESC TO QUIT";

FN PRINT_INSTRUCTIONS() {
  INVERSE();
  RIGHT_JUSTIFY(NAME,20);
  NORMAL();
  RIGHT_JUSTIFY(AUTHOR,21);
  RIGHT_JUSTIFY(TO_QUIT,22);
}

FN RIGHT_JUSTIFY(STR:@,VPOS:1) {
  POSITION_CURSOR(40-STRING_LEN(STR),VPOS);
  PRINT_STRING(STR);
}
# -------------------------------------
# SCORE MANAGEMENT
# -------------------------------------
VAR SCORE:4=0;

DATA SCORE_STR "SCORE=";

FN PRINT_SCORE() {
  VAR STR:11;
  NUM_TO_STR(@SCORE,4,10,@STR);
  POSITION_CURSOR(6,20);
  PRINT_STRING(@STR);
}

CONST TURNOVER_SCORE 12500;

FN UPDATE_SCORE() {
  SET SCORE=SCORE+100;
  PRINT_SCORE();
  IF (SCORE = TURNOVER_SCORE * 
   (SCORE/TURNOVER_SCORE)) {
    TURN_OVER();
  }
}

FN TURN_OVER() {
  TURNOVER_SONG();
  WHILE (NOT (TAIL=HEAD-2)) {
    PLOT_SEG(TAIL,BLACK);
    SET TAIL=TAIL+2;
  }  
}
# -------------------------------------
# 256-BYTE CIRCULAR BUFFER FOR 
# POSITIONS OF SNAKE SEGMENTS
#
# FOR SEGMENT S, COUNTING TAIL=0:
# - SEG_BUF[TAIL+2*S,1] STORES X COORD
# - SEG_BUF[TAIL+2*S+1,1] STORES Y COORD
#
# INITIALLY THERE ARE TWO SEGMENTS
# -------------------------------------
DATA SEG_BUF 19; # TAIL X
DATA         20; # TAIL Y
DATA	     20; # HEAD X
DATA	     20; # HEAD Y
DATA	     0:256-4;
# -------------------------------------
# POINTERS TO HEAD AND TAIL
# -------------------------------------
VAR HEAD:1=2;
VAR TAIL:1=0;
# -------------------------------------
# SNAKE MANAGEMENT
# -------------------------------------
CONST SEG_COLOR_1 BROWN;
CONST SEG_COLOR_2 DARK_GREEN;

FN INIT_SNAKE() {
  PLOT_SEG(HEAD,SEG_COLOR_1);
  PLOT_SEG(TAIL,SEG_COLOR_2);
}

VAR NEW_X:1;
VAR NEW_Y:1;

FN MOVE_SNAKE() {
  SET NEW_X=SEG_BUF[HEAD,1]+DELTA_X;
  SET NEW_Y=SEG_BUF[HEAD+1,1]+DELTA_Y;
  # CHECK IF WE WENT OFF THE SCREEN
  CHECK_BOUNDS();
  # CHECK FOR SELF-COLLISION
  CHECK_COLLISION();
  # ALTERNATE SEGMENT COLORS
  IF ((HEAD AND 4)=0)
    PLOT_SEG(HEAD,SEG_COLOR_1);
  ELSE
    PLOT_SEG(HEAD,SEG_COLOR_2);
  SET HEAD=HEAD+2;
  SET SEG_BUF[HEAD,1]=NEW_X;
  SET SEG_BUF[HEAD+1,1]=NEW_Y;
  PLOT_SEG(HEAD,SEG_COLOR_1);
  IF (ATE_APPLE()) {
    APPLE_SONG();
    PLACE_APPLE();
    UPDATE_SCORE();
  }
  ELSE {
    PLOT_SEG(TAIL,BLACK);
    SET TAIL=TAIL+2;
  }
  DRAW_APPLE();
}

FN CHECK_BOUNDS() {
  IF ((NOT IN_BOUNDS(NEW_X)) OR 
   (NOT IN_BOUNDS(NEW_Y))) {
    GAME_OVER();
  } 
}

FN CHECK_COLLISION() {
  # O(1) DETECTION OF SELF-COLLISION, WOZ-STYLE
  IF ((SCRN(NEW_X,NEW_Y)=SEG_COLOR_2)
   OR (SCRN(NEW_X,NEW_Y)=SEG_COLOR_1))
    GAME_OVER();
}

FN ATE_APPLE():1 {
  RETURN SEG_BUF[HEAD,2]=(@APPLE_X)[0,2];
}

FN PLOT_SEG(PTR:1,COLOR:1) {
  VAR X:1;
  VAR Y:1;
  SET_COLOR(COLOR);
  SET X=SEG_BUF[PTR,1];
  SET Y=SEG_BUF[PTR+1,1];
  PLOT(X,Y);
}
# -------------------------------------
# APPLE COORDINATES
# -------------------------------------
VAR APPLE_X:1;
VAR APPLE_Y:1;
# -------------------------------------
# PSEUDO-RANDOM COORDS FOR NEXT APPLE
# -------------------------------------
VAR NEXT_APPLE_X:1;
VAR NEXT_APPLE_Y:1;
# -------------------------------------
# APPLE MANAGEMENT
# -------------------------------------
CONST APPLE_COLOR RED;

FN INIT_APPLE() {
  SET NEXT_APPLE_X=MON_RNDL[0,1];
  SET NEXT_APPLE_Y=MON_RNDH[0,1];
  PLACE_APPLE();
  DRAW_APPLE();
}

FN PLACE_APPLE() {
  SET APPLE_X=NORMALIZE(NEXT_APPLE_X);
  SET APPLE_Y=NORMALIZE(NEXT_APPLE_Y);
}

FN DRAW_APPLE() {
  SET_COLOR(APPLE_COLOR);
  PLOT(APPLE_X,APPLE_Y);
}

CONST NEXT_APPLE_X_OFFSET 7;
CONST NEXT_APPLE_Y_OFFSET 11;

FN UPDATE_NEXT_APPLE() {
   SET NEXT_APPLE_X=NEXT_APPLE_X+
    NEXT_APPLE_X_OFFSET;
   SET NEXT_APPLE_Y=NEXT_APPLE_Y+
    NEXT_APPLE_Y_OFFSET;
}
# -------------------------------------
# INPUT
# -------------------------------------
CONST LEFT 	$08;
CONST RIGHT	$15;
CONST UP	$0B;
CONST DOWN	$0A;
CONST ESC	27;

VAR DELTA_X:1=1;
VAR DELTA_Y:1=0;
VAR DIR:1=RIGHT;

FN GET_INPUT() {
  VAR CH:1;
  IF (KEY_PRESSED()) {
    SET CH=READ_KBD();
    IF (CH=ESC) {
      EXIT_GAME();
    }
    IF (CH=LEFT AND NOT (DIR=RIGHT)) {
      SET DIR=LEFT;
      SET DELTA_X=-1;
      SET DELTA_Y=0;
    }
    IF (CH=UP AND NOT (DIR=DOWN)) {
      SET DIR=UP;
      SET DELTA_X=0;
      SET DELTA_Y=-1;
    }
    IF (CH=RIGHT AND NOT (DIR=LEFT)) {
      SET DIR=RIGHT;
      SET DELTA_X=1;
      SET DELTA_Y=0;
    }
    IF (CH=DOWN AND NOT (DIR=UP)) {
      SET DIR=DOWN;
      SET DELTA_X=0;
      SET DELTA_Y=1;
    }
  }
}
# -------------------------------------
# MUSIC
# -------------------------------------
FN APPLE_SONG() {
  TONE(PITCH_C_4,$400);
  TONE(PITCH_B_FLAT_3,$400);
  TONE(PITCH_A_3,$400);
  TONE(PITCH_G_SHARP_3,$400);
  TONE(PITCH_A_3,$400);
}

FN TURNOVER_SONG() {
  TONE(PITCH_C_4,$800);
  REST($800);
  TONE(PITCH_C_4,$800);
  TONE(PITCH_C_4,$800);
  TONE(PITCH_F_4,$2000);
  TONE(PITCH_F_2,$1000);
}

FN GAME_OVER_SONG() {
  TONE(PITCH_C_3,$1200);
  TONE(PITCH_B_FLAT_2,$1200);
  TONE(PITCH_A_FLAT_2,$1200);
  TONE(PITCH_G_2,$1200);
  TONE(PITCH_F_2,$1200);
}
# -------------------------------------
# HELPER FUNCTIONS
# -------------------------------------
FN GAME_OVER() {
  GAME_OVER_SONG();
  WHILE (TRUE) {
    WAIT_KEYPRESS();
    IF (READ_KBD()=ESC)
      EXIT_GAME();      
  }
}

FN IN_BOUNDS(COORD:1):1 {
  RETURN COORD < 40;
}

FN NORMALIZE(N:1S):1 {
  IF (N < 0) {
    RETURN NORMALIZE(40+N);
  }
  RETURN N-40*(N/40);
}

FN EXIT_GAME() {
  SET_TEXT();
  MON_HOME();
  EXIT();
}

INCLUDE "GRAPHICS.AVM";
INCLUDE "IO.AVM";
INCLUDE "STRING.AVM";
INCLUDE "TONES.AVM";