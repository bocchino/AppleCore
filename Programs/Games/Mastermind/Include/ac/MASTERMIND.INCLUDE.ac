# -----------------------------------
# COLOR INFO
# -----------------------------------
# NUMBER OF COLORS TO CHOOSE FROM
CONST NUM_COLORS  8;
# NUMBER OF COLORS IN CODE
CONST CODE_SIZE   5;

DATA COLORS DARK_BLUE;
DATA        LIGHT_GREEN;
DATA        RED;
DATA        YELLOW;
DATA        VIOLET;
DATA        ORANGE;
DATA        WHITE;
DATA        DARK_GREY;

CONST NO_GUESS -1;
CONST NO_CODE  -2;

DATA COLOR_NAMES "BGRYVOWX"\;
# -----------------------------------
# STATE VARIABLES
# -----------------------------------
# SHOULD WE QUIT THE GAME?
VAR DONE_GAME:1=FALSE;
# CODE TO BE GUESSED
VAR CODE:CODE_SIZE;
# USER GUESSES
VAR GUESSES:CODE_SIZE;
# COUNT NUMBER OF USER TRIES
VAR TRY:1;
# ARE WE DONE WITH THE ROUND?
VAR DONE_ROUND:1;
# X AND Y CURSOR POSITION
VAR XPOS:1;
VAR YPOS:1;
# WHETHER THE USER ENTERED THE LINE
VAR LINE_ENTERED:1;
# -----------------------------------
# INTRO SCREEN
# -----------------------------------
DATA WELCOME "WELCOME TO THE GAME OF MASTERMIND!";
DATA RULES   "\$0D\$0DYOUR OBJECT IS TO GUESS FIVE COLORS "\;
DATA         "(WHICH I WILL MAKE UP) IN THE MINIMUM NUMBER OF GUESSES. "\;
DATA         "YOU'LL ENTER ONE GUESS ON EACH LINE. "\;
DATA         "AFTER YOU ENTER EACH GUESS, "\;
DATA         "I'LL PROVIDE SOME FEEDBACK:\$0D\$0D"\;
DATA         "- EACH WHITE SQUARE MEANS A CORRECT COLOR "\;
DATA         "IN THE CORRECT POSITION\$0D\$0D"\;
DATA         "- EACH GREY SQUARE MEANS A CORRECT COLOR "\;
DATA         "IN THE WRONG POSITION\$0D\$0D"\;
DATA         "WHEN YOU'VE GOT IT RIGHT, I'LL RATE YOUR PERFORMANCE "\;
DATA         "(EXCELLENT, GOOD, AVERAGE, OR POOR). GOOD LUCK!\$0D\$0D";

DATA BEGIN   "PRESS ANY KEY TO BEGIN PLAY";

FN INTRO() {
  MON_HOME();
  MON_CROUT();
  POSITION_CURSOR_X(3);
  INVERSE();
  PRINT_STRING(WELCOME);  
  NORMAL();
  PRINT_WORDS(RULES);
  INVERSE();
  POSITION_CURSOR_X(6);
  PRINT_STRING(BEGIN);
  NORMAL();
  MON_RDKEY();
}
# -----------------------------------
# INITIALIZE A ROUND
# -----------------------------------
FN INIT_ROUND() {
  VAR I:1=0;
  # 16 RANDOM BITS FROM KEYBOARD
  VAR BITS:2=MON_RNDL[0,2];
  DRAW_BOARD();
  SET TRY=0;  
  SET DONE_ROUND=FALSE;
  # INIT PEG COLORS
  WHILE (I<CODE_SIZE) {
    SET (@CODE)[I,1]=COLORS[(@BITS)[0,1] AND 7,1];
    SET (@BITS)[0,2]=(@BITS)[0,2]>>3;
    INCR I;
  }
}
# -----------------------------------
# DRAW THE GAME BOARD
# -----------------------------------
DATA INSTRUCTIONS "LETTER KEYS AND ARROWS: CHANGE COLORS\$0D"\;
DATA              "RETURN: ACCEPT GUESS #\$0D"\;
DATA              "ESC: QUIT";

DATA SPACES "   ";

FN DRAW_BOARD() {
  VAR I:1=0;
  MON_HOME();
  SET_GRAPHICS();
  SET_LO_RES();
  SET_TEXT_WINDOW();
  MON_CLRTOP();
  POSITION_CURSOR(0,20);
  WHILE (I<NUM_COLORS) {
    SET_COLOR(COLORS[I,1]);
    HLINE(I*4+2,I*4+4,39);
    PRINT_STRING(SPACES);
    PRINT_CHAR(COLOR_NAMES[I,1]);
    INCR I;
  }  
  POSITION_CURSOR(0,21);
  PRINT_STRING(INSTRUCTIONS);
}
# -----------------------------------
# PLAY A ROUND OF THE GAME
# -----------------------------------
FN PLAY_ROUND() {
  VAR I:1=0;
  # SET DEFAULT GUESS TO DARK GREY
  WHILE (I<CODE_SIZE) {
    SET (@GUESSES)[I,1]=DARK_GREY;
    INCR I;
  }
  WHILE (NOT DONE_ROUND) {
    INCR TRY;
    POSITION_CURSOR(22,22);
    PRINT_TRY();
    SET YPOS=TRY*2-36*(TRY*2/36);
    DISPLAY_GUESSES();
    FLASH_CURSOR();
    IF (NOT DONE_GAME) 
      GIVE_FEEDBACK();
  }
}
# -----------------------------------
# DISPLAY USER GUESSES
# -----------------------------------
FN DISPLAY_GUESSES() {
  VAR I:1=0;
  SET_COLOR(BLACK);
  HLINE(0,39,YPOS);
  WHILE (I<CODE_SIZE) {
    DISPLAY_GUESS(I,YPOS,(@GUESSES)[I,1]);
    INCR I;
  }
}
FN DISPLAY_GUESS(X:1,Y:1,COLOR:1) {
  SET_COLOR(COLOR);
  HLINE(X*4+2,X*4+4,Y);
}
# -----------------------------------
# FLASH CURSOR AND PROCESS INPUT
# -----------------------------------
CONST CURSOR_INTERVAL 50;

FN FLASH_CURSOR() {
  VAR COLOR:1=BLACK;
  SET LINE_ENTERED=FALSE;
  SET XPOS=0;
  WHILE (NOT LINE_ENTERED) {
    DISPLAY_GUESS(XPOS,YPOS,COLOR);
    GET_INPUT();
    IF (COLOR=BLACK) {
      SET COLOR=(@GUESSES)[XPOS,1];
    }
    ELSE SET COLOR=BLACK;
  }
}

FN GET_INPUT() {
  VAR I:1=0;
  VAR CHAR:1;
  WHILE (I<CURSOR_INTERVAL) {
    SET CHAR=READ_KBD();
    IF (CHAR > $7F) {
      PROCESS_CHAR(CHAR);
      RETURN;
    }
    INCR I;
  }
}
# -----------------------------------
# PROCESS A CHARACTER OF INPUT
# -----------------------------------
CONST CR    $0D;
CONST LEFT_ARROW  $08;
CONST RIGHT_ARROW $15;
CONST ESC   27;

FN PROCESS_CHAR(CHAR:1) {
  VAR I:1=0;
  IF (EQ_CHAR(CHAR,CR)) {
    DISPLAY_GUESS(XPOS,YPOS,(@GUESSES)[XPOS,1]);
    SET LINE_ENTERED=TRUE;
  }
  ELSE IF (EQ_CHAR(CHAR,LEFT_ARROW)) {
    DISPLAY_GUESS(XPOS,YPOS,(@GUESSES)[XPOS,1]);
    IF (XPOS=0) SET XPOS=CODE_SIZE-1;
    ELSE DECR XPOS;
  }
  ELSE IF (EQ_CHAR(CHAR,RIGHT_ARROW)) { 
    DISPLAY_GUESS(XPOS,YPOS,(@GUESSES)[XPOS,1]);
    IF (XPOS=CODE_SIZE-1) SET XPOS=0;
    ELSE INCR XPOS;
  }
  ELSE IF (EQ_CHAR(CHAR,ESC)) {
    SET LINE_ENTERED=TRUE;
    SET DONE_ROUND=TRUE;
    SET DONE_GAME=TRUE;
  }
  ELSE {
    WHILE (I<NUM_COLORS) {
      IF (EQ_CHAR(CHAR,COLOR_NAMES[I,1])) {
        SET (@GUESSES)[XPOS,1]=COLORS[I,1];
        PROCESS_CHAR(RIGHT_ARROW);
        RETURN;
      }
      INCR I;
    } 
  }
}
# -----------------------------------
# GIVE FEEDBACK ON GUESSES
# -----------------------------------
FN GIVE_FEEDBACK() {
  VAR I:1=0;
  VAR J:1=0;
  VAR NUM_CORRECT:1=0;
  VAR TMP_GUESSES:CODE_SIZE=GUESSES;
  VAR TMP_CODE:CODE_SIZE=CODE;
  SET_COLOR(WHITE);
  WHILE (I < CODE_SIZE) {
    IF ((@TMP_GUESSES)[I,1]=(@TMP_CODE)[I,1]) {
      INCR NUM_CORRECT;
      PLOT(21+(NUM_CORRECT<<1),YPOS);
      SET (@TMP_GUESSES)[I,1]=NO_GUESS;
      SET (@TMP_CODE)[I,1]=NO_CODE;
    }
    INCR I;
  }
  IF (NUM_CORRECT=CODE_SIZE) {
    SET DONE_ROUND=TRUE;
    RETURN;
  }
  SET_COLOR(DARK_GREY);
  SET I=0;
  WHILE (I < CODE_SIZE) {
    SET J=0;
    WHILE (J < CODE_SIZE) {
      IF ((@TMP_GUESSES)[I,1]=(@TMP_CODE)[J,1]) {
        INCR NUM_CORRECT;
        PLOT(21+(NUM_CORRECT<<1),YPOS);
        SET (@TMP_GUESSES)[I,1]=NO_GUESS;
        SET (@TMP_CODE)[J,1]=NO_CODE;
      }            
      INCR J;
    }
    INCR I;
  }
}
# -----------------------------------
# FINISH ROUND AFTER CORRECT GUESS
# -----------------------------------
DATA GOT_IT_1  "YOU GOT IT IN ";
DATA GOT_IT_2  " TRIES (";
DATA EXCELLENT "EXCELLENT";
DATA GOOD      "GOOD";
DATA AVERAGE   "AVERAGE";
DATA POOR      "POOR";
DATA AGAIN     "\$0DPLAY AGAIN (Y/N)? ";

FN FINISH_ROUND() {
  POSITION_CURSOR(0,21);
  MON_CLREOP();
  PRINT_STRING(GOT_IT_1);
  PRINT_TRY();
  PRINT_STRING(GOT_IT_2);
  IF (TRY<7) PRINT_STRING(EXCELLENT);
  ELSE IF (TRY<10) PRINT_STRING(GOOD);
  ELSE IF (TRY<15) PRINT_STRING(AVERAGE);
  ELSE PRINT_STRING(POOR);
  PRINT_CHAR(')');
  PRINT_STRING(AGAIN);
  MON_RDKEY();
  IF (NOT EQ_CHAR(^A,'Y')) SET DONE_GAME=TRUE;  
}
# -----------------------------------
# PRINT THE CURRENT TRY
# -----------------------------------
FN PRINT_TRY() {
  NUM_TO_STR(@TRY,1,10,MON_IN);
  PRINT_STRING(MON_IN);
}

