# -----------------------------------
# MINI ADVENTURE: COMMANDS
# -----------------------------------
# COMMAND MESSAGES
# -----------------------------------
DATA CMD_DONT_KNOW "I DON'T UNDERSTAND THAT COMMAND.";
DATA CANT_GO       "YOU CAN'T GO THAT WAY.";
DATA NO_CARRY      "YOU AREN'T CARRYING ANYHING.";
DATA YOU_HAVE      "YOU HAVE:\$0D\$0D";
# -----------------------------------
# COMMAND DATA
# -----------------------------------
CONST NUM_CMDS 12;

DATA CMD_NAMES CMD_NAME_QUIT;
DATA           CMD_NAME_NORTH;
DATA           CMD_NAME_SOUTH;
DATA           CMD_NAME_EAST;
DATA           CMD_NAME_WEST;
DATA           CMD_NAME_UP;
DATA           CMD_NAME_DOWN;
DATA           CMD_NAME_LOOK;
DATA           CMD_NAME_INV;
DATA           CMD_NAME_HELP;
DATA           CMD_NAME_CMDS;
DATA           CMD_NAME_CAT;

DATA CMD_NAME_QUIT  "QUIT";
DATA CMD_NAME_NORTH "NORTH";
DATA CMD_NAME_SOUTH "SOUTH";
DATA CMD_NAME_EAST  "EAST";
DATA CMD_NAME_WEST  "WEST";
DATA CMD_NAME_UP    "UP";
DATA CMD_NAME_DOWN  "DOWN";
DATA CMD_NAME_LOOK  "LOOK";
DATA CMD_NAME_INV   "INVENTORY";
DATA CMD_NAME_HELP  "HELP";
DATA CMD_NAME_CMDS  "COMMANDS";
DATA CMD_NAME_CAT   "CATALOG";

DATA CMD_FNS CMD_QUIT_FN;
DATA         CMD_N_FN;
DATA         CMD_S_FN;
DATA         CMD_E_FN;
DATA         CMD_W_FN;
DATA         CMD_U_FN;
DATA         CMD_D_FN;
DATA         CMD_LOOK_FN;
DATA         CMD_INV_FN;
DATA         CMD_HELP_FN;
DATA         CMD_CMDS_FN;
DATA         CMD_CAT_FN;
# -----------------------------------
# COMMAND FUNCTIONS
# -----------------------------------
FN DO_COMMAND(WORD:@) {
  VAR CMD_NUM:1=FIND_WORD(WORD,
    CMD_NAMES,NUM_CMDS);
  VAR CMD_FN:@;
  MON_CROUT();
  IF (CMD_NUM=-1) {
    PRINT_WORDS(CMD_DONT_KNOW);
    MON_CROUT();
  }
  ELSE {
    SET CMD_FN=CMD_FNS[CMD_NUM*2,@];
    CMD_FN();
  }
}

FN CMD_QUIT_FN() {
  SET DONE=TRUE;
}

FN GO(TO:1) {
  VAR EXIT:1=RM_EXIT(CURRENT_RM,TO);
  IF (EXIT=RM_WIN) {
    SET WON=TRUE;
    SET DONE=TRUE;
  }
  ELSE IF (EXIT=RM_NONE) {
    PRINT_WORDS(CANT_GO);
    MON_CROUT();
  }
  ELSE {
    SET CURRENT_RM=EXIT;
    CMD_LOOK_FN();
  }  
}

FN CMD_N_FN() { GO(NORTH); }
FN CMD_S_FN() { GO(SOUTH); }
FN CMD_E_FN() { GO(EAST); }
FN CMD_W_FN() { GO(WEST); }
FN CMD_U_FN() { GO(UP); }
FN CMD_D_FN() { GO(DOWN); }

DATA PITCH_BLACK "IT IS NOW PITCH BLACK. IF YOU ATTEMPT TO GO ANY "\;
DATA             "FURTHER, IT MAY RESULT IN YOUR DEATH.\$0D";

FN CMD_LOOK_FN() {
  IF (IN_DARK()) {
    PRINT_WORDS(PITCH_BLACK);
  }
  ELSE {
    PRINT_RM(CURRENT_RM);
  }
}

FN CMD_INV_FN() {
  VAR I:1=0;
  IF (NUM_CARRIED=0) {
    PRINT_WORDS(NO_CARRY);
    MON_CROUT();
  }
  ELSE {
    PRINT_WORDS(YOU_HAVE);
    WHILE (I<NUM_CARRIED) {
      PRINT_WORDS(OBJ_NAME(CARRIED_OBJ(I)));
      MON_CROUT();
      INCR I;
    }
  }
}

FN CMD_HELP_FN() {
  PRINT_WORDS(RM_HELP(CURRENT_RM));
  MON_CROUT();
}

DATA CMDS "TO MOVE NORTH, SOUTH, EAST, WEST, UP, OR DOWN, TYPE "\;
DATA      "THE DIRECTION. IF YOU WISH, YOU MAY ALSO TYPE \$22GO\$22 "\;
DATA      "FOLLOWED BY THE DIRECTION, AS IN \$22GO NORTH.\$22\$0D"\;

DATA      "\$0DTYPE \$22LOOK\$22 TO LOOK AROUND.\$0D"\;

DATA      "\$0DTYPE \$22INVENTORY\$22 TO SEE WHAT YOU ARE CARRYING.\$0D"\;

DATA      "\$0DTYPE \$22HELP\$22 TO GET A CLUE THAT MAY OR MAY NOT "\;
DATA      "BE HELPFUL.\$0D"\;

DATA      "\$0DTYPE \$22SAVE X\$22 TO SAVE THE GAME TO FILE X, "\;
DATA      "WHERE X IS A FILE NAME THAT MAY NOT CONTAIN SPACES. "\;
DATA      "FOR EXAMPLE:  \$22SAVE MY.GAME\$22\$0D"\;

DATA      "\$0DTYPE \$22RESTORE X\$22 TO RESTORE TO FILE X.\$0D"\;

DATA      "\$0DTYPE \$22CATALOG\$22 TO SEE WHAT'S ON THE DISK.\$0D";

FN CMD_CMDS_FN() {
  PRINT_WORDS(CMDS);
}

# VARIABLE WHERE DOS ERROR CODE IS STORED
CONST DOS_ERRNO $DE;

DATA CAT "\$04CATALOG";

FN CMD_CAT_FN() {
  SET DOS_ERRNO[0,1]=0;
  PRINT_STRING(CAT);
  MON_CROUT();
  HANDLE_DOS_ERR();
}

DATA BSAVE "\$04BSAVE ";
DATA BLOAD "\$04BLOAD ";
DATA A     ",A$";
DATA L     ",L$";

# COPY FILE NAME HERE, BECAUSE
# DOS CLOBBERS MON_INBUF
VAR FILE_BUF:32;
# TERMINATING ZERO
DATA 0;

FN CMD_SAVE_FN(FILE:@) {
  VAR ADDR:@=MA_STATE_BEGIN;
  VAR LEN:1=MA_STATE_END-MA_STATE_BEGIN+1;
  SET (@FILE_BUF)[0,32]=FILE[0,32];
  SET DOS_ERRNO[0,1]=0;
  PRINT_STRING(BSAVE);
  PRINT_STRING(@FILE_BUF);
  PRINT_STRING(A);
  PRINT_HEX(@ADDR,2);
  PRINT_STRING(L);
  PRINT_HEX(@LEN,1);
  MON_CROUT();
  HANDLE_DOS_ERR();
}

FN CMD_REST_FN(FILE:@) {
  SET (@FILE_BUF)[0,32]=FILE[0,32];
  SET DOS_ERRNO[0,1]=0;
  PRINT_STRING(BLOAD);
  PRINT_STRING(@FILE_BUF);
  MON_CROUT();
  IF (DOS_ERRNO[0,1]=0) {
    MON_CROUT();
    CMD_LOOK_FN();
  }
  ELSE HANDLE_DOS_ERR();
}

CONST DOS_NOT_FOUND 6;

DATA NOT_FOUND "\$0DI COULDN'T FIND THE FILE.\$0D";
DATA NOT_READ  "\$0DI COULDN'T READ THE DISK.\$0D";

FN HANDLE_DOS_ERR() {
  VAR ERR:1=DOS_ERRNO[0,1];
  IF (ERR=DOS_NOT_FOUND) {
    PRINT_WORDS(NOT_FOUND);
  }
  ELSE IF (ERR > 0) {
    PRINT_WORDS(NOT_READ);
  }
}
