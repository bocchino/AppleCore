*--------------------------------
* ADDRESS REFERENCE EQUATES
* FOR APPLE II MONITOR INTERFACE
*--------------------------------
* ZERO PAGE STORAGE LOCATIONS
*--------------------------------
MON.LOC0   .EQ $00  LOCATION $00
MON.LOC1   .EQ $01  LOCATION $01
MON.WNDLFT .EQ $20  LEFT OF TEXT WINDOW
MON.WNDWDTH .EQ $21 WIDTH OF TEXT WINDOW
MON.WNDTOP .EQ $22  TOP OF TEXT WINDOW
MON.WNDBTM .EQ $23  BOTTOM OF TEXT WINDOW
MON.CH     .EQ $24  CURSOR HORIZONTAL POSITION
MON.CV     .EQ $25  CURSOR VERTICAL POSITION
MON.GBASL  .EQ $26  BASE ADDRESS FOR LO-RES GRAPHICS DISPLAY
MON.GBASH  .EQ $27
MON.BASL   .EQ $28  BASE ADDRESS FOR TEXT DISPLAY
MON.BASH   .EQ $29
MON.BAS2L  .EQ $2A
MON.BAS2H  .EQ $2B
MON.H2     .EQ $2C  LENGTH OF LINE FOR MON.HLINE
MON.LMNEM  .EQ $2C  LEFT BYTE OF ASSEMBLER MNEMONIC
MON.V2     .EQ $2D  LENGTH OF LINE FOR MON.VLINE
MON.RMNEM  .EQ $2D  RIGHT BYTE OF ASSEMBLER MNEMONIC
MON.MASK   .EQ $23  LO-RES GRAPHICS MASK
MON.CHKSUM .EQ $2E  CHECKSUM FOR TAPE INPUT
MON.FORMAT .EQ $2E  DISASSEMBLER FORMAT
MON.LASTIN .EQ $2F  LAST BYTE READ FROM TAPE
MON.LENGTH .EQ $2F  INSTRUCTION LENGTH FOR DISASSEMBLER
MON.COLOR  .EQ $30  LO-RES COLOR
MON.MODE   .EQ $31  MONITOR MODE
MON.INVFLG .EQ $32  INVERSE TEXT FLAG
MON.PROMPT .EQ $33  PROMPT DISPLAYED BY MON.GETLN
MON.YSAV   .EQ $34  SAVED Y-REG
MON.YSAV1  .EQ $35
MON.CSWL   .EQ $36  CHARACTER OUTPUT VECTOR
MON.CSWH   .EQ $37    NORMALLY SET TO MON.KEYIN
MON.KSWL   .EQ $38  KEYBOARD INPUT VECTOR
MON.KSWH   .EQ $39    NORMALLY SET TO MON.COUT1
MON.PCL    .EQ $3A  PROGRAM COUNTER
MON.PCH    .EQ $3B
MON.A1L    .EQ $3C  MONITOR ARGUMENT 1
MON.A1H    .EQ $3D
MON.A2L    .EQ $3E  MONITOR ARGUMENT 2
MON.A2H    .EQ $3F
MON.A3L    .EQ $40  MONITOR ARGUMENT 3
MON.A3H    .EQ $41
MON.A4L    .EQ $42  MONITOR ARGUMENT 4
MON.A4H    .EQ $43
MON.A5L    .EQ $44  MONITOR ARGUMENT 5
MON.A5H    .EQ $45
MON.ACC    .EQ $45  SAVED A-REG
MON.XREG   .EQ $46  SAVED X-REG
MON.YREG   .EQ $47  SAVED Y-REG
MON.STATUS .EQ $48  SAVED P-REG
MON.SPNT   .EQ $49  SAVED S-REG
MON.RNDL   .EQ $4E  RANDOM NUMBER SEED SET BY MON.KEYIN
MON.RNDH   .EQ $4F
*--------------------------------
* STACK
*--------------------------------
MON.STACK  .EQ $0100
*--------------------------------
* INPUT BUFFER
*--------------------------------
MON.IN     .EQ $0200
*--------------------------------
* PAGE 3 VECTORS
*--------------------------------
MON.SOFTEV .EQ $3F2      WARM START
MON.PWREDUP .EQ $3F4     MUST BE (SOFTEV+1) EOR #$A5
*--------------------------------
* SUBROUTINE ENTRY POINTS
*--------------------------------
MON.PLOT   .EQ $F800     PRINT LO-RES BLOCK AT (Y,A)
MON.HLINE  .EQ $F819     DRAW LINE FROM (Y,A) TO (MON.LENGTH,A)
MON.VLINE  .EQ $F828     DRAW LINE FROM (Y,A) TO (Y,MON.LENGTH)
MON.CLRSCR .EQ $F832     CLEAR LO-RES SCREEN
MON.CLRTOP .EQ $F836     CLEAR TOP OF LO-RES SCREEN
MON.SETCOL .EQ $F864     SET LO-RES GRAPHICS COLOR
MON.SCRN   .EQ $F871     READ LO-RES SCREEN AT (Y,A) INTO A
MON.PRNTAX .EQ $F941     PRINT A,X AS HEX DIGITS
MON.PRBL2  .EQ $F94A     PRINT # OF BLANKS SPECIFIED IN X-REG
MON.PREAD  .EQ $FB1E     READ GAME CONTROLLER GIVEN BY X
MON.SETPWRC .EQ $FB6F    SET POWER-UP BYTE FOR RESET
MON.BELL1  .EQ $FBDD     BEEP SPEAKER
MON.VTAB   .EQ $FC22     SET MON.BASL,H FROM MON.CV
MON.CLREOP .EQ $FC42     CLEAR FROM CURSOR TO END OF PAGE
MON.HOME   .EQ $FC58     CLEAR SCREEN AND REPOSITION CURSOR
MON.CR     .EQ $FC62     DO CARRIAGE RETURN (CURSOR DOWN AND TO LEFT)
MON.LF     .EQ $FC66     DO LINE FEED (CURSOR DOWN)
MON.SCROLL .EQ $FC70     SCROLL SCREEN DOWN ONE LINE
MON.CLREOL .EQ $FC9C     CLEAR FROM CURSOR TO END OF LINE
MON.WAIT   .EQ $FCA8     WAIT FOR TIME GIVEN IN A-REG
MON.RDKEY  .EQ $FD0C     FLASH CURSOR AT (MON.BASL),MON.CH AND
MON.RDCHAR .EQ $FD35     SAME AS MON.RDKEY, BUT HANDLE ESCAPE CURSOR
*                          GET CHAR INTO A-REG VIA MON.KSW
MON.KEYIN  .EQ $FD1B     GET CHARACTER FROM KEYBOARD
MON.GETLN  .EQ $FD6A     PRINT MON.PROMPT, THEN CALL MON.GETLN1
MON.GETLNZ .EQ $FD67     OUTPUT CR, THEN CALL MON.GETLN
MON.GETLN1 .EQ $FD6F     GET LINE INTO MON.IN, NO PROMPT
MON.CROUT1 .EQ $FD8B     CLEAR LINE AND CALL CROUT
MON.CROUT  .EQ $FD8E     SEND RETURN CHARACTER TO COUT
MON.PRBYTE .EQ $FDDA     PRINT A-REG AS HEX DIGITS
MON.PRHEX  .EQ $FDE3     PRINT LOWER NYBBLE OF A-REG AS HEX DIGIT
MON.COUT   .EQ $FDED     OUTPUT A-REG AS ASCII VIA MON.CSW
MON.COUT1  .EQ $FDF0     OUTPUT A-REG TO SCREEN AT (MON.BASL),MON.CH
MON.MOVE   .EQ $FE2C     MOVE (A1+Y TO A2+Y) TO A4
MON.SETINV .EQ $FE80     SET INVERSE MODE
MON.SETNORM .EQ $FE84    SET NORMAL MODE
MON.BELL   .EQ $FF3A     SEND BELL (CTRL-G) TO COUT
MON.IOREST .EQ $FF3F     RESTORE ALL REGS
MON.IOSAVE .EQ $FF4A     SAVE ALL REGS
MON.GETNUM .EQ $FFA7     READ NUMBER FROM MON.IN,Y INTO MON.A1
	