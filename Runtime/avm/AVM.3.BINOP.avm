* -------------------------------
* THE APPLECORE COMPILER, V1.0
* APPLECORE VM, PART 3
* BINARY OPERATIONS
* -------------------------------
* INITIALIZATION FOR BINARY OPS
* SET SIZE=A
* SET IP=SP-SIZE
* SET SP-=2*SIZE
* PRESERVES X,Y
* -------------------------------
AVM.INIT.BINOP
        JSR AVM.DSP
        JSR AVM.SET.IP.TO.SP
        JMP AVM.SP.DOWN.SIZE
* -------------------------------
* SET A=SP[SIZE-1,1]
* -------------------------------
AVM.GET.MSB
	LDY AVM.SIZE
	DEY
	LDA (AVM.SP),Y
	RTS
* -------------------------------
* SET SIZE=A
* SET SP-=SIZE
* SET SP[-SIZE,SIZE]+=SP[0,SIZE]
* -------------------------------
AVM.ADD
	JSR AVM.INIT.BINOP
	JSR AVM.ADD.1
        JMP AVM.SET.SP.TO.IP
* -------------------------------
* SET SP[0,SIZE]+=IP[0,SIZE]
* CLOBBERS X,Y
* -------------------------------
AVM.ADD.1
	LDX AVM.SIZE
	LDY #0
        CLC
.1      LDA (AVM.SP),Y
        ADC (AVM.IP),Y
        STA (AVM.SP),Y
        INY
        DEX
        BNE .1
	RTS
* -------------------------------
* BINARY OP -
* SET A=SIZE
* SET SP-=SIZE
* SET SP[-SIZE,SIZE]-=SP[0,SIZE]
* -------------------------------
AVM.SUB
        JSR AVM.INIT.BINOP
	JSR AVM.SUB.1
        JMP AVM.SET.SP.TO.IP
* -------------------------------
* SET SP[0,SIZE]-=IP[0,SIZE]
* CLOBBERS X,Y
* -------------------------------
AVM.SUB.1
	LDX AVM.SIZE
	LDY #0
        SEC
.1      LDA (AVM.SP),Y
        SBC (AVM.IP),Y
        STA (AVM.SP),Y
        INY
        DEX
        BNE .1
        RTS
* -------------------------------
* BINARY OP *
* SET SIZE=A
* SET SP-=SIZE
* SET SP[-SIZE,SIZE]*=SP[0,SIZE]
* MULT IS SIGNED IF X=/=0
* CLOBBERS IDX.1,IDX.2,IP
* -------------------------------
AVM.MUL
	STA AVM.SIZE
	STA AVM.IDX.1
* SAVE SIGNEDNESS
	TXA
	PHA
* CLEAR RESULT
	LDX #0
	JSR AVM.PUSH.X.SIZE.TIMES
* SET SP AND IP
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SET.IP.TO.SP
	JSR AVM.SP.UP.SIZE
* CHECK SIGNEDNESS
	PLA
	BNE AVM.MUL.SIGNED
* -------------------------------
* UNSIGNED MULTIPLICATION
* -------------------------------
AVM.MUL.UNSIGNED
* DO 8 BITS PER BYTE
.1	LDA #8
	STA AVM.IDX.2
.2	LDA AVM.IDX.1
	PHA
	JSR AVM.MUL.INNER
	PLA
	STA AVM.IDX.1
	DEC AVM.IDX.2
	BNE .2
	DEC AVM.IDX.1
	BNE .1
* SET SP, MOVE RESULT INTO PLACE
	JSR AVM.SP.UP.SIZE
	JSR AVM.SET.IP.TO.SP
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SP.DOWN.SIZE
	JMP AVM.MTS.1
* -------------------------------
* SIGNED MULTIPLICATION
* -------------------------------
AVM.MUL.SIGNED
* CHECK SIGN BIT OF LHS
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.GET.MSB
	STA AVM.GR
	BPL .1
* NEGATIVE, NEGATE
	SEC
	JSR AVM.NOT.2
* CHECK SIGN BIT OF LHS
.1	JSR AVM.SP.UP.SIZE
	JSR AVM.GET.MSB
	PHA
	BPL .2
* NEGATIVE, NEGATE
	SEC
	JSR AVM.NOT.2
* COMPARE SIGN BITS OF LHS, RHS
.2      PLA
	EOR AVM.GR
	AND #$80
* DO MULTIPLICATION
	PHA
	JSR AVM.MUL.UNSIGNED
	PLA
	BNE .3
	RTS
* SIGN BITS UNEQ, NEGATE RESULT
.3	LDA AVM.SIZE
	JMP AVM.NEG
* -------------------------------
* INNER LOOP FOR UNSIGNED MUL
* ON ENTRY IP POINTS TO LHS,
* SP POINTS TO RHS
* -------------------------------
AVM.MUL.INNER
* SHIFT RHS 1 TO RIGHT
	CLC
	JSR AVM.SHR.INNER
* CHECK LSB OF RHS
	BCC .1
* IF IT'S 1, ADD LHS TO RESULT
	JSR AVM.SP.UP.SIZE
	JSR AVM.ADD.1
	JSR AVM.SP.DOWN.SIZE
* SHIFT LHS 1 TO LEFT
.1	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SHL.INNER
	JMP AVM.SP.UP.SIZE
* -------------------------------
* SET SIZE=A
* SET SP-=SIZE
* DIVIDE SP[-SIZE,SIZE]
*	BY SP[0,SIZE]
* QUOTIENT IN SP[-SIZE,SIZE]
* REMAINDER IN SP[SIZE,SIZE]
* DIV IS SIGNED IF X=/=0
* CLOBBERS IDX.1,IDX.2,IP,GR
* -------------------------------
AVM.DIV
	STA AVM.SIZE
	STA AVM.IDX.1
* SAVE SIGNEDNESS
	TXA
	PHA
* CLEAR REMAINDER
	LDX #0
	JSR AVM.PUSH.X.SIZE.TIMES
* SET SP AND IP
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SET.IP.TO.SP
	JSR AVM.SP.DOWN.SIZE
* CHECK SIGNEDNESS
	PLA
	BNE AVM.DIV.SIGNED
* -------------------------------
* UNSIGNED DIVISION
* -------------------------------
AVM.DIV.UNSIGNED
* DO 8 BITS PER BYTE
.1	LDA #8
	STA AVM.IDX.2
.2	LDA AVM.IDX.1
	PHA
	JSR AVM.DIV.INNER
	PLA
	STA AVM.IDX.1
	DEC AVM.IDX.2
	BNE .2
	DEC AVM.IDX.1
	BNE .1
* MOVE SP
	JMP AVM.SP.UP.SIZE
* -------------------------------
* SIGNED DIVISION
* -------------------------------
AVM.DIV.SIGNED
	JSR AVM.GET.MSB
	AND #$80
	STA AVM.GR
	BEQ .1
* LHS < 0, NEGATE
	SEC
	JSR AVM.NOT.2
.1	JSR AVM.SP.UP.SIZE
	JSR AVM.GET.MSB
	AND #$80
	PHA
	BEQ .2
* RHS < 0, NEGATE
	SEC
	JSR AVM.NOT.2
* DO THE DIVISION
.2	JSR AVM.SP.DOWN.SIZE
	JSR AVM.DIV.UNSIGNED
* COMPARE SIGNS OF LHS,RHS
	PLA
	EOR AVM.GR
	BNE .3
	RTS
* NEGATE QUOTIENT
.3	LDA AVM.SIZE
	JMP AVM.NEG
* -------------------------------
* INNER LOOP FOR UNSIGNED DIV
* ON ENTRY SP POINTS TO
* LHS/QUOTIENT, IP POINTS TO RHS
* -------------------------------
AVM.DIV.INNER
* SHIFT LHS/QUOTIENT 1 TO LEFT
	JSR AVM.SHL.INNER
	PHP
	JSR AVM.SP.UP.SIZE
	JSR AVM.SP.UP.SIZE
* SHIFT LHS INTO REMAINDER
	PLP
	JSR AVM.SHL.INNER.1
* COMPARE REMAINDER TO RHS
	LDY AVM.SIZE
	JSR AVM.CMP.U
	BCS .1
* REMAINDER TOO SMALL
	JSR AVM.SP.DOWN.SIZE
	JMP AVM.SP.DOWN.SIZE
* SUBTRACT RHS FROM REMAINDER
.1	JSR AVM.SUB.1
* ADD 1 TO QUOTIENT
	JSR AVM.SP.DOWN.SIZE
	JSR AVM.SP.DOWN.SIZE
	LDY #0
	LDA (AVM.SP),Y
	ORA #1
	STA (AVM.SP),Y
	RTS
* -------------------------------
* SET SIZE=A
* SET SP-=(SIZE+1)
* SET GR=SP[SIZE,1]
* SET SP[0,SIZE]<<=GR
* SET SP+=SIZE
* -------------------------------
AVM.SHL
	JSR AVM.INIT.SHIFT
* OUTER LOOP OVER SHAMT
	LDX AVM.GR
* INNER LOOP OVER SIZE
.1	JSR AVM.SHL.INNER
	DEX
	BNE .1
	JMP AVM.SP.UP.SIZE
* -------------------------------
* SET SIZE=A
* SET SP-=(SIZE+1)
* SET GR=SP[SIZE,1]
* SET SP[0,SIZE]>>=GR
* SHIFT IS SIGNED IF X=/=0
* SET SP+=SIZE
* CLOBBERS IDX.2
* -------------------------------
AVM.SHR
	JSR AVM.INIT.SHIFT
* STORE SHAMT IN IDX.1
	LDA AVM.GR
	STA AVM.IDX.1
* CHECK SIGNEDNESS
	TXA
	BEQ .1
* SIGNED SHIFT, SET X=MSb
	LDY AVM.SIZE
	DEY
	LDA (AVM.SP),Y
	TAX
* OUTER LOOP OVER SHAMT
.1	ASL
* INNER LOOP OVER SIZE
	JSR AVM.SHR.INNER
	TXA
	DEC AVM.IDX.1
	BNE .1
	JMP AVM.SP.UP.SIZE
* -------------------------------
* INITIALIZE SHIFT OP
* SET SIZE=A
* SET SP-=(SIZE+1)
* SET GR=SHAMT
* PRESERVES X
* -------------------------------
AVM.INIT.SHIFT
	PHA
* POP AND STORE SHAMT
	JSR AVM.POP.A
	STA AVM.GR
* ADJUST SP AND STORE SIZE
	PLA
	JMP AVM.DSP
* -------------------------------
* INNER LOOP FOR SHR
* -------------------------------
AVM.SHR.INNER
	LDY AVM.SIZE
.2	DEY
	LDA (AVM.SP),Y
	ROR
	STA (AVM.SP),Y
	TYA
	BNE .2
	RTS	
* -------------------------------
* INNER LOOP FOR SHL
* CLOBBERS IDX.1
* -------------------------------
AVM.SHL.INNER
	CLC
AVM.SHL.INNER.1
	LDY #0
	LDA AVM.SIZE
	STA AVM.IDX.1
.1	LDA (AVM.SP),Y
	ROL
	STA (AVM.SP),Y
	INY
	DEC AVM.IDX.1
	BNE .1
	RTS
* -------------------------------
* SET A = SIZE
* SET SP-=2*SIZE
* COMPARE SP[0,SIZE]
* 	TO SP[SIZE,SIZE]
* COMPARISON IS SIGNED IF X=/=0
* PUSH 1=EQ, 0=NEQ
* -------------------------------
AVM.TEQ
        JSR AVM.CMP
	BEQ AVM.PUSH.1
	BNE AVM.PUSH.0
* -------------------------------
* ...PUSH 1=GT, 0=LEQ
* -------------------------------
AVM.TGT
        JSR AVM.CMP
        BEQ AVM.PUSH.0
	BNE AVM.TGE.1
* -------------------------------
* ...PUSH 1=GEQ, 0=LT
* -------------------------------
AVM.TGE
        JSR AVM.CMP
AVM.TGE.1
	BCC AVM.PUSH.0
	BCS AVM.PUSH.1
* -------------------------------
* ...PUSH 1=LEQ, 0=GT
* -------------------------------
AVM.TLE
        JSR AVM.CMP
	BEQ AVM.PUSH.1
	BNE AVM.TLT.1
* -------------------------------
* ...PUSH 1=LT, 0=GEQ
* -------------------------------
AVM.TLT
        JSR AVM.CMP
AVM.TLT.1
        BCC AVM.PUSH.1
* -------------------------------
* SET SIZE=1
* PUSH 0
* -------------------------------
AVM.PUSH.0
	LDA #0
	JMP AVM.PUSH.A
* -------------------------------
* SET SIZE=1
* PUSH 1
* -------------------------------
AVM.PUSH.1
	LDA #1
        JMP AVM.PUSH.A
* -------------------------------
* SET SIZE=A
* SET SP-=2*SIZE
* COMPARE SP[SIZE,A] TO
*	SP[SIZE,SIZE]
* COMPARISON IS SIGNED IF X=/=0
* SET C=GEQ,Z=EQ
* -------------------------------
AVM.CMP
* IP=SP-SIZE, SP-=2*SIZE
        JSR AVM.INIT.BINOP
* Y=SIZE
        LDY AVM.SIZE
* X=SIGNEDNESS
        TXA
        BEQ AVM.CMP.U
* SIGNED, CHECK SIGN BITS
        DEY
        LDA (AVM.SP),Y
	EOR (AVM.IP),Y
	AND #$80
	BEQ AVM.CMP.U.1
* SIGN BITS UNEQUAL
	SEC
	LDA (AVM.IP),Y
* NOT ZERO
	ORA #1
* SIGN BIT INTO CARRY
	ROL
	RTS
* -------------------------------
* COMPARE SP[0,Y] TO IP[0,Y]
* COMPARISON IS UNSIGNED
* SET C=GEQ,Z=EQ
* -------------------------------
AVM.CMP.U
	DEY
AVM.CMP.U.1
        LDA (AVM.SP),Y  
        CMP (AVM.IP),Y
        BEQ .1
* UNEQUAL, WE'RE DONE
	RTS
* EQUAL, KEEP GOING
.1	TYA
        BNE AVM.CMP.U
* CHECKED ALL BYTES
	RTS
* -------------------------------
* SET SIZE=A
* SET SP-=2*SIZE
* SET SP[0,SIZE]=(SP[0,SIZE]
*	AND SP[SIZE,SIZE])
* -------------------------------
AVM.ANL
        JSR AVM.INIT.BINOP
	LDY #0
.1      LDA (AVM.SP),Y
        AND (AVM.IP),Y
        STA (AVM.SP),Y
        INY
	CPY AVM.SIZE
        BNE .1
        JMP AVM.SET.SP.TO.IP
* -------------------------------
* SET SIZE=A
* SET SP-=2*SIZE
* SET SP[0,SIZE]=(SP[0,SIZE]
*	OR SP[SIZE,SIZE])
* -------------------------------
AVM.ORL
	JSR AVM.INIT.BINOP
	LDY #0
.1      LDA (AVM.SP),Y
        ORA (AVM.IP),Y
        STA (AVM.SP),Y
        INY
	CPY AVM.SIZE
        BNE .1
        JMP AVM.SET.SP.TO.IP
* -------------------------------
* SET SIZE=A
* SET SP-=2*SIZE
* SET SP[0,SIZE]=(SP[0,SIZE]
*	XOR SP[SIZE,SIZE])
* -------------------------------
AVM.ORX
	JSR AVM.INIT.BINOP
	LDY #0
.1      LDA (AVM.SP),Y
        EOR (AVM.IP),Y
        STA (AVM.SP),Y
        INY
        CPY AVM.SIZE
        BNE .1
        JMP AVM.SET.SP.TO.IP
