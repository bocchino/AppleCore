:NEW
* -------------------------------
* THE APPLECORE COMPILER, V1.0
* APPLECORE VIRTUAL MACHINE, PT 1
* -------------------------------
* PROGRAM COUNTER
* -------------------------------
AVM.PCL	.EQ $3A
AVM.PCH .EQ $3B
* -------------------------------
* EXECUTE AN AVM FUNCTION
* -------------------------------
AVM.EXECUTE.FN
* SAVE ACC RETURN ADDRESS
	LDA AVM.PCL
	JSR AVM.PUSH.A
	LDA AVM.PCH
	JSR AVM.PUSH.A
* STORE PROGRAM COUNTER
	PLA
	STA AVM.PCL
	PLA
	STA AVM.PCH
* SAVE 6502 RETURN ADDRESS
	PLA
	JSR AVM.PUSH.A
	PLA
	JSR AVM.PUSH.A
* SAVE FP
	JSR AVM.PUSH.FP
* SET NEW FP
	JSR AVM.SET.FP.TO.SP
* INSTRUCTION LOOP
.1	JSR AVM.DO.INSTR
	JMP .1
* -------------------------------
* DO AN AVM INSTRUCTION
* -------------------------------
AVM.DO.INSTR
	JSR AVM.FETCH.BYTE
	STA AVM.IDX.1
	STA AVM.SIZE
	AND #$F8
	BEQ AVM.BRANCH
* -------------------------------
* SIZED OR SIGNED INSTRUCTION
* -------------------------------
	LSR
	LSR
	LSR
	CLC
	ADC #$07
	STA AVM.IDX.1
	CMP #$1C
	LDA AVM.SIZE
	BCS AVM.SIGNED
* -------------------------------
* SIZED
* -------------------------------
* GET SIZE
	AND #7
	BEQ AVM.FETCH.SIZE
	BNE AVM.STORE.SIZE
* -------------------------------
* SIGNED
* -------------------------------
AVM.SIGNED
* GET SIGN BIT
	AND #4
	LSR
	LSR
	TAX
* GET SIZE
	LDA AVM.SIZE
	AND #3
	BNE AVM.STORE.SIZE
AVM.FETCH.SIZE
 	JSR AVM.FETCH.BYTE
AVM.STORE.SIZE
	STA AVM.SIZE
* -------------------------------
* BRANCH TO HANDLER
* -------------------------------
AVM.BRANCH
	ASL AVM.IDX.1
	LDY AVM.IDX.1
	LDA AVM.INSTR.TBL+1,Y
	PHA
	LDA AVM.INSTR.TBL,Y
	PHA
	LDA AVM.SIZE
	RTS
* -------------------------------
* INSTRUCTION HANDLER ADDRESSES
* -------------------------------
AVM.INSTR.TBL
	.DA AVM.BRK-1	     BRK
	.DA AVM.BRF-1	     BRF
	.DA AVM.BRU-1	     BRU
	.DA AVM.CFD-1	     CFD
	.DA AVM.CFI-1	     CFI
	.DA AVM.BRK-1	     ???
	.DA AVM.BRK-1	     ???
	.DA AVM.BRK-1	     ???
	.DA AVM.ADD-1        ADD
	.DA AVM.ANL-1        ANL
	.DA AVM.DCR-1        DCR
	.DA AVM.DSP-1        DSP
	.DA AVM.ICR-1        ICR
	.DA AVM.ISP-1        ISP
	.DA AVM.MTS-1        MTS
	.DA AVM.MTV-1	     MTV
	.DA AVM.NEG-1        NEG
	.DA AVM.NOT-1        NOT
	.DA AVM.ORL-1        ORL
	.DA AVM.ORX-1        ORX
	.DA AVM.PHC-1        PHC
	.DA AVM.PVA-1        PVA
	.DA AVM.RAF-1	     RAF
	.DA AVM.SHL-1        SHL
	.DA AVM.STM-1        STM
	.DA AVM.SUB-1        SUB
	.DA AVM.TEQ-1        TEQ
	.DA AVM.VTM-1        VTM
	.DA AVM.DIV-1        DIV
	.DA AVM.EXT-1        EXT
	.DA AVM.MUL-1        MUL
	.DA AVM.SHR-1        SHR
	.DA AVM.TGE-1        TGE
	.DA AVM.TGT-1        TGT
	.DA AVM.TLE-1        TLE
	.DA AVM.TLT-1        TLT
	.DA AVM.BRK-1	     ???
	.DA AVM.BRK-1	     ???
	.DA AVM.BRK-1	     ???
* -------------------------------
* INSTRUCTION HANDLERS
* -------------------------------
AVM.BRK
	BRK
* -------------------------------
AVM.BRF	
	JSR AVM.POP.A
	AND #1
	BEQ AVM.BRU
* -------------------------------
* GET L,H INTO X,A
* -------------------------------
AVM.GET.L.H
	JSR AVM.FETCH.BYTE
	TAX
* -------------------------------
* INC PC AND FETCH INTO A
* -------------------------------
AVM.FETCH.BYTE
	JSR AVM.INC.PC
	LDY #0
	LDA (AVM.PCL),Y
	RTS
* -------------------------------
AVM.BRU
	JSR AVM.GET.L.H
	STA AVM.PCH
	STX AVM.PCL
	JMP AVM.DEC.PC
* -------------------------------
AVM.CFD
	JSR AVM.GET.L.H
	STA AVM.IP+1
	TXA
AVM.CFD.1
	STA AVM.IP
	JSR MON.RESTORE
	JSR AVM.CFD.2
	JMP MON.SAVE
AVM.CFD.2
	JMP (AVM.IP)
* -------------------------------
AVM.CFI
	JSR AVM.POP.A
	STA AVM.IP+1
	JSR AVM.POP.A
	JMP AVM.CFD.1
* -------------------------------
* SET SIZE=A
* SET SP-=SIZE
* PRESERVES X,Y
* -------------------------------
AVM.DSP
        STA AVM.SIZE
* -------------------------------
* SET SP-=SIZE
* PRESERVES X,Y
* -------------------------------
AVM.SP.DOWN.SIZE
        LDA AVM.SP
        SEC
        SBC AVM.SIZE
        STA AVM.SP
        BCS .1
        DEC AVM.SP+1
.1      RTS
* -------------------------------
* SET Y,SIZE=A
* PUSH SIZE 0'S OR $FF'S
* ON ENTRY X MUST BE 0 OR 1
* SIGN EXTEND IF X=MSb=1
* ZERO EXTEND OTHERWISE
* CLOBBERS X
* -------------------------------
AVM.EXT
        STA AVM.SIZE
	TXA
	BEQ AVM.PUSH.X.SIZE.TIMES
* X=1, LOOK AT MSb
	DEX
        JSR AVM.SP.DOWN.SIZE
	LDY AVM.SIZE
	DEY
	LDA (AVM.SP),Y
        AND #$80
        PHA
        JSR AVM.SP.UP.SIZE
	PLA
        BEQ AVM.PUSH.X.SIZE.TIMES
* SET X=$FF
	DEX
* -------------------------------
* SET SP[0,SIZE]=X, SP+=SIZE
* SET Y=A
* PRESERVES X
* -------------------------------
AVM.PUSH.X.SIZE.TIMES
	LDY AVM.SIZE
.1	DEY
	TXA
	STA (AVM.SP),Y
	TYA
	BNE .1
	JMP AVM.SP.UP.SIZE
* -------------------------------
* INCREMENT AVM PC
* -------------------------------
AVM.INC.PC
	INC AVM.PCL
	BNE .1
	INC AVM.PCH
.1	RTS
* -------------------------------
* DECREMENT AVM PC
* -------------------------------
AVM.DEC.PC
	LDA AVM.PCL
	BNE .1
	DEC AVM.PCH
.1	DEC AVM.PCL
	RTS
