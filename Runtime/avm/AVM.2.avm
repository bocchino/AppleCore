:NEW
* -------------------------------
* THE APPLECORE COMPILER, V1.0
* APPLECORE VM, PART 2
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* SET SIZE=A
* SET SP[0,SIZE]=IP[0,SIZE]
* SET SP+=SIZE
* SET X=SIZE
* SET Y=0
* -------------------------------
AVM.MTS
        STA AVM.SIZE
        JSR AVM.POP.IP
* -------------------------------
* SET SP[0,SIZE]=IP[0,SIZE]
* SET SP+=SIZE
* CLOBBERS Y
* -------------------------------
AVM.MTS.1
	LDY AVM.SIZE
	BNE .1
	RTS
.1      DEY
        LDA (AVM.IP),Y
        STA (AVM.SP),Y
        TYA
        BNE .1
        JMP AVM.SP.UP.SIZE
* -------------------------------
AVM.MTV
 	PHA
	JSR AVM.FETCH.BYTE
	TAX
	PLA
	TAY
	LDA $00,X
	STA (AVM.FP),Y
	RTS
* -------------------------------
AVM.PHC
	STA AVM.IDX.1
	BEQ .2
.1	JSR AVM.FETCH.BYTE
	JSR AVM.PUSH.A
	DEC AVM.IDX.1
	BNE .1
.2	RTS
* -------------------------------
* SET SP[0,2]=FP
* SET SP+=2
* SET Y=1
* PRESERVES X
* -------------------------------
AVM.PUSH.FP
        LDA #0
* -------------------------------
* SET SP[0,2]=FP+A
* SET SIZE=2
* SET SP+=2
* SET Y=1
* PRESERVES X
* -------------------------------
AVM.PVA
        LDY #0
        CLC
        ADC AVM.FP
        STA (AVM.SP),Y
        INY
        LDA AVM.FP+1
        ADC #0
        STA (AVM.SP),Y
        LDA #2
* -------------------------------
* SET SIZE=A
* SET SP+=SIZE
* PRESERVES X,Y
* -------------------------------
AVM.ISP
	STA AVM.SIZE
* -------------------------------
* SET SP+=SIZE
* PRINT ERROR AND ABORT ON
* STACK OVERFLOW
* -------------------------------
AVM.SP.UP.SIZE
	LDA AVM.SP
        CLC
        ADC AVM.SIZE
        STA AVM.SP
        BCC .1
        INC AVM.SP+1
.1      JSR AVM.CHECK.SP
	BCC .2
	RTS
.2	LDX #AVM.STACK.OVERFLOW
	LDA /AVM.STACK.OVERFLOW
	JSR AVM.PRINT.STRING
	JMP DOS.COLD.START
* -------------------------------
AVM.RAF
* SAVE SIZE
	TAX
* SAVE PTR TO RETURN VALUE
	JSR AVM.DSP
	JSR AVM.SET.IP.TO.SP
* RESTORE SP
	JSR AVM.SET.SP.TO.FP
* RESTORE FP
	JSR AVM.POP.A
	STA AVM.FP+1
	JSR AVM.POP.A
	STA AVM.FP
* RESTORE 6502 RETURN ADDRESS
  	PLA
	PLA
	JSR AVM.POP.A
	PHA
	JSR AVM.POP.A
	PHA
* RESTORE PROGRAM COUNTER
	JSR AVM.POP.A
	STA AVM.PCH
	JSR AVM.POP.A
	STA AVM.PCL
* EVALUATE RETURN VALUE
	STX AVM.SIZE
	JMP AVM.MTS.1
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* SET SIZE=A
* SET SP-=SIZE
* SET IP[0,SIZE]=SP[0,SIZE]
* SET X=SIZE
* CLOBBERS Y
* -------------------------------
AVM.STM
        STA AVM.SIZE
        JSR AVM.POP.IP
AVM.STM.1
        JSR AVM.SP.DOWN.SIZE
	LDY AVM.SIZE
.1      DEY
        LDA (AVM.SP),Y
        STA (AVM.IP),Y
        TYA
        BNE .1
        RTS
* -------------------------------
AVM.VTM
 	PHA
	JSR AVM.FETCH.BYTE
	TAX
	PLA
	TAY
	LDA (AVM.FP),Y
	STA $00,X
	RTS
* -------------------------------
* SET SP[0,2]=FP
* SET SP+=2
* SET Y=0
* SET SIZE=1
* PRESERVES X
* -------------------------------
AVM.PUSH.SP
	LDA AVM.SP
        JSR AVM.PUSH.A
        LDA AVM.SP+1
* -------------------------------
* SET SP[0,1]=A
* INC SP
* SET Y=0
* SET SIZE=1
* PRESERVES X
* -------------------------------
AVM.PUSH.A
        LDY #0
        STA (AVM.SP),Y
        LDA #1
        JMP AVM.ISP
* -------------------------------
* DEC SP
* SET SIZE=1
* SET A=SP[0,1]
* SET Y=0
* -------------------------------
AVM.POP.A
	LDA #1
	JSR AVM.DSP
	LDY #0
	LDA (AVM.SP),Y
	RTS
* -------------------------------
* PRINT STRING AT X LO, A HI
* DESTROYS IP, Y
* -------------------------------
AVM.PRINT.STRING
	STX AVM.IP
	STA AVM.IP+1
.1	LDY #0
	LDA (AVM.IP),Y
	BEQ .2
	ORA #$80
	JSR $FDED
	INC AVM.IP
	BNE .1
	INC AVM.IP+1
	BNE .1
.2	RTS
* -------------------------------
* SET FP=SP
* PRESERVES X,Y
* -------------------------------
AVM.SET.FP.TO.SP
        LDA AVM.SP
        STA AVM.FP
        LDA AVM.SP+1
        STA AVM.FP+1
        RTS
* -------------------------------
* SET SP=FP
* PRESERVES X,Y
* -------------------------------
AVM.SET.SP.TO.FP
        LDA AVM.FP
        STA AVM.SP
        LDA AVM.FP+1
        STA AVM.SP+1
	RTS
* -------------------------------
* SET IP=SP
* PRESERVES X,Y
* -------------------------------
AVM.SET.IP.TO.SP
        LDA AVM.SP
        STA AVM.IP
        LDA AVM.SP+1
        STA AVM.IP+1
        RTS
* -------------------------------
* SET SP=IP
* PRESERVES X,Y
* -------------------------------
AVM.SET.SP.TO.IP
        LDA AVM.IP
        STA AVM.SP
        LDA AVM.IP+1
        STA AVM.SP+1
        RTS
* -------------------------------
* CHECK IF SP IS WITHIN BOUNDS
* -------------------------------
AVM.CHECK.SP
	LDA AVM.SP.BOUND+1
	CMP AVM.SP+1
	BNE .1
	LDA AVM.SP.BOUND
	CMP AVM.SP
.1	RTS
* -------------------------------
* ERROR MESSAGE: "STACK OVERFLOW"
* -------------------------------
AVM.STACK.OVERFLOW
	.HS 07
	.AS "STACK OVERFLOW"
	.HS 00
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* CLOBBERS X,Y
* PRESERVES SIZE
* -------------------------------
AVM.POP.IP
	LDX AVM.SIZE
	JSR AVM.POP.A
	STA AVM.IP+1
	JSR AVM.POP.A
	STA AVM.IP
	STX AVM.SIZE
        RTS
* -------------------------------
* REMEMBER WHICH BASIC WAS THERE
* -------------------------------
AVM.STORED.BASIC
	.BS 1
* -------------------------------
* PATCH DOS
* -------------------------------
AVM.PATCH.DOS
* GO TO INT BASIC DEFERRED MODE
        LDA $AAB6
	STA AVM.STORED.BASIC
	LDY #$0
	STY $AAB6
	DEY
	STY $D9
* PATCH ERROR HANDLING
	JSR AVM.EXECUTE.FN
	PHC $A6D59F834CDE86AA5CAE
	STM $8
	RAF $0
* -------------------------------
* RESTORE DOS
* -------------------------------
AVM.UNPATCH.DOS
* GO BACK TO PREVIOUS BASIC
	LDA AVM.STORED.BASIC
	STA $AAB6
* RESTORE ERROR HANDLING
	JSR AVM.EXECUTE.FN
	PHC $A6D504F0AAB6ADBFE620
	STM $8
	RAF $0
* -------------------------------
* STORED RESET VECTOR
* -------------------------------
AVM.STORED.RESETV 
        .BS 2
* -------------------------------
* RESTORE RESET VECTOR
* -------------------------------
AVM.RESTORE.RESETV
	LDX AVM.STORED.RESETV
	LDA AVM.STORED.RESETV+1
* -------------------------------
* SET RESET VECTOR TO (X,A)
* -------------------------------
AVM.SET.RESETV
	LDY $3F2
	STY AVM.STORED.RESETV
	STX $3F2
	LDY $3F3
	STY AVM.STORED.RESETV+1
	STA $3F3
	EOR #$A5
	STA $3F4
	RTS


