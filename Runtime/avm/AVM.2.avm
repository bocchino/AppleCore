:NEW
* -------------------------------
* THE APPLECORE COMPILER, V1.0
* APPLECORE VM, PART 2
* -------------------------------
* SET Y,SIZE=A
* PUSH SIZE 0'S OR $FF'S
* ON ENTRY X MUST BE 0 OR 1
* SIGN EXTEND IF X=MSb=1
* ZERO EXTEND OTHERWISE
* CLOBBERS X
* -------------------------------
AVM.EXT
        STA ACC.SIZE
	TXA
	BEQ ACC.PUSH.X.SIZE.TIMES
* X=1, LOOK AT MSb
	DEX
        JSR ACC.SP.DOWN.SIZE
	LDY ACC.SIZE
	DEY
	LDA (ACC.SP),Y
        AND #$80
        PHA
        JSR ACC.SP.UP.SIZE
	PLA
        BEQ ACC.PUSH.X.SIZE.TIMES
* SET X=$FF
	DEX
* -------------------------------
* SET SP[0,SIZE]=X, SP+=SIZE
* SET Y=A
* PRESERVES X
* -------------------------------
ACC.PUSH.X.SIZE.TIMES
	LDY ACC.SIZE
.1	DEY
	TXA
	STA (ACC.SP),Y
	TYA
	BNE .1
	JMP ACC.SP.UP.SIZE
* -------------------------------
* SET SP[0,2]=FP
* SET SP+=2
* SET Y=1
* PRESERVES X
* -------------------------------
ACC.PUSH.FP
        LDA #0
* -------------------------------
* SET SP[0,2]=FP+A
* SET SIZE=2
* SET SP+=2
* SET Y=1
* PRESERVES X
* -------------------------------
AVM.PVA
        LDY #0
        CLC
        ADC ACC.FP
        STA (ACC.SP),Y
        INY
        LDA ACC.FP+1
        ADC #0
        STA (ACC.SP),Y
        LDA #2
* -------------------------------
* SET SIZE=A
* SET SP+=SIZE
* PRESERVES X,Y
* -------------------------------
AVM.ISP
	STA ACC.SIZE
* -------------------------------
* SET SP+=SIZE
* PRINT ERROR AND ABORT ON
* STACK OVERFLOW
* -------------------------------
ACC.SP.UP.SIZE
	LDA ACC.SP
        CLC
        ADC ACC.SIZE
        STA ACC.SP
        BCC .1
        INC ACC.SP+1
.1      JSR ACC.CHECK.SP
	BCC .2
	RTS
.2	LDX #ACC.STACK.OVERFLOW
	LDA /ACC.STACK.OVERFLOW
	JSR ACC.PRINT.STRING
	JMP DOS.COLD.START
* -------------------------------
* SET SIZE=A
* SET SP-=SIZE
* PRESERVES X,Y
* -------------------------------
AVM.DSP
        STA ACC.SIZE
* -------------------------------
* SET SP-=SIZE
* PRESERVES X,Y
* -------------------------------
ACC.SP.DOWN.SIZE
        LDA ACC.SP
        SEC
        SBC ACC.SIZE
        STA ACC.SP
        BCS .1
        DEC ACC.SP+1
.1      RTS
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* SET SIZE=A
* SET SP[0,SIZE]=IP[0,SIZE]
* SET SP+=SIZE
* SET X=SIZE
* SET Y=0
* -------------------------------
AVM.MTS
        STA ACC.SIZE
        JSR ACC.POP.IP
* -------------------------------
* SET SP[0,SIZE]=IP[0,SIZE]
* SET SP+=SIZE
* CLOBBERS Y
* -------------------------------
AVM.MTS.1
	LDY ACC.SIZE
.1      DEY
        LDA (ACC.IP),Y
        STA (ACC.SP),Y
        TYA
        BNE .1
        JMP ACC.SP.UP.SIZE
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* SET SIZE=A
* SET SP-=SIZE
* SET IP[0,SIZE]=SP[0,SIZE]
* SET X=SIZE
* CLOBBERS Y
* -------------------------------
AVM.STM
        STA ACC.SIZE
        JSR ACC.POP.IP
AVM.STM.1
        JSR ACC.SP.DOWN.SIZE
	LDY ACC.SIZE
.1      DEY
        LDA (ACC.SP),Y
        STA (ACC.IP),Y
        TYA
        BNE .1
        RTS
* -------------------------------
* SET SP[0,2]=FP
* SET SP+=2
* SET Y=0
* SET SIZE=1
* PRESERVES X
* -------------------------------
ACC.PUSH.SP
	LDA ACC.SP
        JSR ACC.PUSH.A
        LDA ACC.SP+1
* -------------------------------
* SET SP[0,1]=A
* INC SP
* SET Y=0
* SET SIZE=1
* PRESERVES X
* -------------------------------
ACC.PUSH.A
        LDY #0
        STA (ACC.SP),Y
        LDA #1
        JMP AVM.ISP
* -------------------------------
* DEC SP
* SET SIZE=1
* SET A=SP[0,1]
* SET Y=0
* -------------------------------
ACC.POP.A
	LDA #1
	JSR AVM.DSP
	LDY #0
	LDA (ACC.SP),Y
	RTS
* -------------------------------
* PRINT STRING AT X LO, A HI
* DESTROYS IP, Y
* -------------------------------
ACC.PRINT.STRING
	STX ACC.IP
	STA ACC.IP+1
.1	LDY #0
	LDA (ACC.IP),Y
	BEQ .2
	ORA #$80
	JSR $FDED
	INC ACC.IP
	BNE .1
	INC ACC.IP+1
	BNE .1
.2	RTS
* -------------------------------
* SET FP=SP
* PRESERVES X,Y
* -------------------------------
ACC.SET.FP.TO.SP
        LDA ACC.SP
        STA ACC.FP
        LDA ACC.SP+1
        STA ACC.FP+1
        RTS
* -------------------------------
* SET SP=FP
* PRESERVES X,Y
* -------------------------------
ACC.SET.SP.TO.FP
        LDA ACC.FP
        STA ACC.SP
        LDA ACC.FP+1
        STA ACC.SP+1
	RTS
* -------------------------------
* SET IP=SP
* PRESERVES X,Y
* -------------------------------
ACC.SET.IP.TO.SP
        LDA ACC.SP
        STA ACC.IP
        LDA ACC.SP+1
        STA ACC.IP+1
        RTS
* -------------------------------
* SET SP=IP
* PRESERVES X,Y
* -------------------------------
ACC.SET.SP.TO.IP
        LDA ACC.IP
        STA ACC.SP
        LDA ACC.IP+1
        STA ACC.SP+1
        RTS
* -------------------------------
* CHECK IF SP IS WITHIN BOUNDS
* -------------------------------
ACC.CHECK.SP
	LDA ACC.SP.BOUND+1
	CMP ACC.SP+1
	BNE .1
	LDA ACC.SP.BOUND
	CMP ACC.SP
.1	RTS
* -------------------------------
* ERROR MESSAGE: "STACK OVERFLOW"
* -------------------------------
ACC.STACK.OVERFLOW
	.HS 07
	.AS "STACK OVERFLOW"
	.HS 00
* -------------------------------
* SET SP-=2
* SET IP=SP[0,2]
* CLOBBERS X,Y
* PRESERVES SIZE
* -------------------------------
ACC.POP.IP
	LDX ACC.SIZE
	JSR ACC.POP.A
	STA ACC.IP+1
	JSR ACC.POP.A
	STA ACC.IP
	STX ACC.SIZE
        RTS
