:NEW
* -------------------------------
* THE APPLECORE COMPILER, V1.0
* APPLECORE VM, PART 5
* BUILT-IN FUNCTIONS
* -------------------------------
* EXIT THE PROGRAM
* -------------------------------
EXIT
* RESTORE DOS ERROR HANDLING
	JSR AVM.UNPATCH.DOS
* RESTORE RESET VECTOR
  	JSR AVM.RESTORE.RESETV
* EXIT THROUGH RESET VECTOR
	JMP ($3F2)
* -------------------------------
* FN:2 ALLOCATE(S:1)
* RETURN PTR TO S ZEROS ON STACK
* -------------------------------
ALLOCATE
	LDY #6
	LDA (AVM.SP),Y
	STA AVM.SIZE
* SAVE SP INTO IP
	JSR AVM.SET.IP.TO.SP
* PUSH SIZE ZEROS ON STACK
	LDX #0
	JSR AVM.PUSH.X.SIZE.TIMES
* PUSH IP
	LDA AVM.IP
	JSR AVM.PUSH.A
	LDA AVM.IP+1
	JMP AVM.PUSH.A
* -------------------------------
* FN ADD(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]+B[0,2][0,S]
* -------------------------------
ADD
	JSR AVM.EXECUTE.FN
	ISP $7
	CFD ADD.1
	RAF $0
ADD.1	
	JSR AVM.BUILT.IN.EVAL
	JSR AVM.ADD
	JMP AVM.BUILT.IN.ASSN
* -------------------------------
* FN SUB(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]-B[2,2][0,S]
* -------------------------------
SUB
	JSR AVM.EXECUTE.FN
	ISP $7
	CFD SUB.1
	RAF $0
SUB.1	
	JSR AVM.BUILT.IN.EVAL
	JSR AVM.SUB
	JMP AVM.BUILT.IN.ASSN
* -------------------------------
* FN MUL(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]*B[0,S]
* -------------------------------
MUL
	JSR AVM.EXECUTE.FN
	ISP $7
	CFD MUL.1
	RAF $0
MUL.1	
	JSR AVM.BUILT.IN.EVAL
	LDX #0
	JSR AVM.MUL
	JMP AVM.BUILT.IN.ASSN
* -------------------------------
* FN DIV(A:2,B:2,Q:2,R:2,S:1)
* SET Q[0,S]=A[0,S]/B[0,S]
* SET R[0,S]=A[0,S]%B[0,S]
* -------------------------------
DIV
	JSR AVM.EXECUTE.FN
	ISP $9
	CFD DIV.1
	RAF $0
DIV.1	
	JSR AVM.BUILT.IN.EVAL
	LDX #0
	JSR AVM.DIV
* ASSIGN QUOT
        JSR AVM.BUILT.IN.ASSN
* ASSIGN REM
	JSR AVM.SP.UP.SIZE
	JSR AVM.SP.UP.SIZE
	JSR AVM.SP.UP.SIZE
	LDY #6
	JMP AVM.BUILT.IN.ASSN.1
* -------------------------------
* FN:1S CMP(A:2,B:2,S:1)
* COMPARE A[0,S] WITH B[0,S]
* RETURN -1=LT,0=EQ,1=GT
* -------------------------------
CMP
	JSR AVM.EXECUTE.FN
	ISP $5
	CFD CMP.1
	RAF $1
CMP.1	
* EVALUATE ARGS AND COMPARE
	JSR AVM.BUILT.IN.EVAL
	LDX #0
	JSR AVM.CMP
* TEST RESULT
	BEQ .1
	BCS .2
* NEGATIVE, RESULT=-1
	LDA #$FF
	BMI .3
* EQUAL, RESULT=0
.1	LDA #0
	BEQ .3
* POSITIVE, RESULT=1
.2	LDA #1
* PUSH RESULT
.3	JMP AVM.PUSH.A
* -------------------------------
* EVALUATE A AND B
* -------------------------------
AVM.BUILT.IN.EVAL
* SET SIZE
        JSR AVM.POP.A
	STA AVM.SIZE
* EVAL A
	LDY #0
	JSR AVM.SET.IP.TO.VAR
	JSR AVM.MTS.1
* EVAL B AND RETURN
	LDY #2
	JSR AVM.SET.IP.TO.VAR
	JSR AVM.MTS.1
	LDA AVM.SIZE
	RTS
* -------------------------------
* ASSIGN C
* -------------------------------
AVM.BUILT.IN.ASSN
	LDY #4
AVM.BUILT.IN.ASSN.1
	JSR AVM.SET.IP.TO.VAR
	JMP AVM.STM.1
* -------------------------------
* SET IP=AVM.FP[Y,2]
* -------------------------------
AVM.SET.IP.TO.VAR
	LDA (AVM.FP),Y
	STA AVM.IP
	INY
	LDA (AVM.FP),Y
	STA AVM.IP+1
	RTS
