:NEW
* -------------------------------
* THE APPLECORE COMPILER, V1.0
* BUILT-IN FUNCTIONS
* -------------------------------
* FN:2 ALLOCATE(S:1)
* RETURN PTR TO S ZEROS ON STACK
* -------------------------------
ALLOCATE
* GET SIZE OFF STACK
	LDY #6
	LDA (ACC.SP),Y
	STA ACC.SIZE
* SAVE RESULT IN IP
	JSR ACC.SET.IP.TO.SP
* PUSH SIZE ZEROS ON STACK
	LDX #0
	JSR ACC.PUSH.X.SIZE.TIMES
* PUSH RESULT
	LDA ACC.IP
	JSR ACC.PUSH.A
	LDA ACC.IP+1
	JMP ACC.PUSH.A
* -------------------------------
* FN ADD(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]+B[0,2][0,S]
* -------------------------------
ADD
	LDX #7
	JSR ACC.FN.PROLOGUE
	JSR ACC.BINOP.ADD
	JSR ACC.BUILT.IN.ASSN
	JMP ACC.BUILT.IN.RETURN
* -------------------------------
* FN SUB(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]-B[2,2][0,S]
* -------------------------------
SUB
	LDX #7
	JSR ACC.FN.PROLOGUE
	JSR ACC.BINOP.SUB
	JSR ACC.BUILT.IN.ASSN
	JMP ACC.BUILT.IN.RETURN
* -------------------------------
* FN MUL(A:2,B:2,C:2,S:1)
* SET C[0,S]=A[0,S]*B[0,S]
* -------------------------------
MUL
	LDX #7
	JSR ACC.FN.PROLOGUE
	LDX #0
	JSR ACC.BINOP.MUL
	JSR ACC.BUILT.IN.ASSN
	JMP ACC.BUILT.IN.RETURN
* -------------------------------
* FN DIV(A:2,B:2,Q:2,R:2,S:1)
* SET Q[0,S]=A[0,S]/B[0,S]
* SET R[0,S]=A[0,S]%B[0,S]
* -------------------------------
DIV
	LDX #9
	JSR ACC.FN.PROLOGUE
	LDX #0
	JSR ACC.BINOP.DIV
* ASSIGN QUOT
	LDY #4
	JSR ACC.SET.IP.TO.VAR
	JSR ACC.ASSIGN.1
* ASSIGN REM AND RETURN
	JSR ACC.SP.UP.SIZE
	JSR ACC.SP.UP.SIZE
	JSR ACC.SP.UP.SIZE
	LDY #6
	JSR ACC.BUILT.IN.ASSN.1
	JMP ACC.BUILT.IN.RETURN
* -------------------------------
* FN:1S CMP(A:2,B:2,S:1)
* COMPARE A[0,S] WITH B[0,S]
* RETURN -1=LT,0=EQ,1=GT
* -------------------------------
CMP
	LDX #5
	JSR ACC.FN.PROLOGUE
	LDX #0
	JSR ACC.CMP
* TEST RESULT
	BEQ .1
	BCS .2
* NEGATIVE, RESULT=-1
	LDA #$FF
	BMI .3
* EQUAL, RESULT=0
.1	LDA #0
	BEQ .3
* POSITIVE, RESULT=1
.2	LDA #1
.3	PHA
* RESTORE FP AND SP
	JSR ACC.BUILT.IN.RETURN
	PLA
* PUSH RESULT
	JMP ACC.PUSH.A
* -------------------------------
* BUILT-IN FUNCTION PROLOGUE
* -------------------------------
ACC.FN.PROLOGUE
* SKIP AVM AND 6502 RET ADDRS
	LDA #4
	JSR ACC.SP.UP.A
* SAVE OLD FP
	JSR ACC.PUSH.FP
* SET NEW FP
	JSR ACC.SET.FP.TO.SP
* BUMP SP TO TOP OF FRAME
	TXA
	JSR ACC.SP.UP.A
* SET SIZE
	JSR ACC.POP.A
	STA ACC.SIZE
* EVAL A
	LDY #0
	JSR ACC.SET.IP.TO.VAR
	JSR ACC.EVAL.1
* EVAL B
	LDY #2
	JSR ACC.SET.IP.TO.VAR
	JSR ACC.EVAL.1
* GET SIZE INTO A
	LDA ACC.SIZE
	RTS
* -------------------------------
* ASSIGN C
* -------------------------------
ACC.BUILT.IN.ASSN
	LDY #4
ACC.BUILT.IN.ASSN.1
	JSR ACC.SET.IP.TO.VAR
	JMP ACC.ASSIGN.1
* -------------------------------
* RETURN
* -------------------------------
ACC.BUILT.IN.RETURN
* RESET SP
	JSR ACC.SET.SP.TO.FP
* RESTORE CALLER FP
	JSR ACC.POP.A
	STA ACC.FP+1
	JSR ACC.POP.A
	STA ACC.FP
* SKIP 6502, AVM RET ADDRS
	LDA #4
	JMP ACC.SP.DOWN.A

	
