# --------------------------------------
# THE APPLECORE LIBRARY, V1.0
# STRING FUNCTIONS
# --------------------------------------
# CONVERT NUMBER TO STRING
# N     - POINTER TO NUMBER
# SIZE  - SIZE OF NUMBER
# RADIX - RADIX
# STR   - POINTER TO STRING
# --------------------------------------
FN NUM_TO_STR(N:@,SIZE:1,RADIX:1,STR:@) {
  VAR ZERO:@   =ALLOCATE(SIZE);
  VAR RDX_ADJ:@=ALLOCATE(SIZE);
  VAR QUOT:@   =ALLOCATE(SIZE);
  VAR REM:@    =ALLOCATE(SIZE);
  VAR IDX:2=0;
  SET RDX_ADJ[0,1]=RADIX;
  WHILE (TRUE) {
    DIV(N,RDX_ADJ,QUOT,REM,SIZE);
    SET STR[IDX,1]=DIGIT_TO_CHAR(REM[0,1]);
    IF (CMP(QUOT,ZERO,SIZE)=0) {
      SET STR[IDX+1,1]=0;
      REVERSE_STRING(STR,IDX);
      RETURN;
    }
    ELSE {
      INCR IDX;
      SET N=QUOT;
    }
  }
}
# --------------------------------------
# CONVERT STRING TO NUMBER
# STR   - POINTER TO STRING
# RADIX - RADIX
# N     - POINTER TO NUMBER
# SIZE  - SIZE OF NUMBER
# --------------------------------------
FN:1 STR_TO_NUM(STR:@,RADIX:1,N:@,SIZE:1) {
  VAR I:1=0;
  VAR DIGIT:@=ALLOCATE(SIZE);
  VAR RDX_ADJ:@=ALLOCATE(SIZE);
  VAR PROD:@=ALLOCATE(SIZE);
  WHILE (I < SIZE) {
    SET N[I,1]=0;
    INCR I;
  }
  SET RDX_ADJ[0,1]=RADIX;
  WHILE (STR[0,1]>0) {
    SET DIGIT[0,1]=
      CHAR_TO_DIGIT(STR[0,1],RADIX);
    IF (DIGIT[0,1]=$FF) RETURN 0;
    MUL(N,RDX_ADJ,PROD,SIZE);
    ADD(PROD,DIGIT,N,SIZE);
    INCR STR;
  }
  RETURN 1;
}
# --------------------------------------
# REVERSE A STRING IN PLACE
# STR   - POINTER TO STRING
# RIGHT - LAST INDEX OF STRING
# --------------------------------------
FN REVERSE_STRING(STR:@,RIGHT:2) {
  VAR LEFT:2=0;
  VAR DIGIT:1;
  WHILE (LEFT < RIGHT) {
    SET DIGIT=STR[LEFT,1];
    SET STR[LEFT,1]=STR[RIGHT,1];
    SET STR[RIGHT,1]=DIGIT;
    INCR LEFT;
    DECR RIGHT;
  }
}
# --------------------------------------
# COMPARE STRINGS
# --------------------------------------
FN:1S CMP_STRING(STR1:@,STR2:@) {
  VAR CHAR1:1;
  VAR CHAR2:1;
  WHILE (TRUE) {
    SET CHAR1=STR1[0,1] AND $7F;
    SET CHAR2=STR2[0,1] AND $7F;
    IF ((CHAR1=0) AND (CHAR2=0)) {
      RETURN 0;
    }
    ELSE IF (CHAR1 < CHAR2) {
      RETURN -1;
    }
    ELSE IF (CHAR1 > CHAR2) {
      RETURN 1;
    }
    INCR STR1;
    INCR STR2;
  }
  RETURN 0;
}
# --------------------------------------
# COMPUTE STRING LENGTH
# --------------------------------------
FN:2 STRING_LEN(STR:@) {
  VAR LEN:2=0;
  WHILE (NOT (STR[LEN,1]=0)) {
    INCR LEN;
  }
  RETURN LEN;
}
# --------------------------------------
# MATCH PATTERN AGAINST STRING
# STR    - POINTER TO STRING
# PAT    - POINTER TO PATTERN
# RETURN - POINTER TO FIRST MATCH IF
#          FOUND, $FFFF IF NO MATCH
# --------------------------------------
FN MATCH_ASM();

FN:@ MATCH(STR:@,PAT:@) {
  SET MON_A1[0,@]=STR;
  SET MON_A2[0,@]=PAT;
  MATCH_ASM();
  RETURN MON_A1[0,@];
}

INCLUDE "STRING.ASM.AVM";
