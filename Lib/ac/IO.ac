# --------------------------------------
# THE APPLECORE COMPILER, V1.0
# IO FUNCTIONS
# --------------------------------------
# I/O HARDWARE INTERFACE
# --------------------------------------
# TOGGLE SPEAKER
CONST SPEAKER			$C030;
# READ KEYBOARD
CONST KBD_STROBE		$C000;
# CLEAR KEYBOARD STROBE
CONST CLEAR_KBD_STROBE		$C010;
# --------------------------------------
# READ KEYBOARD AND CLEAR STROBE
# --------------------------------------
FN:1 READ_KBD() {
  VAR CHAR:1=KBD_STROBE[0,1];
  SET CLEAR_KBD_STROBE[0,1]=0;
  RETURN CHAR;
}
# --------------------------------------
# WAS KEY PRESSED?
# --------------------------------------
FN:1 KEY_PRESSED() {
  RETURN READ_KBD() > $7F;
}
# --------------------------------------
# WAIT FOR KEYPRESS
# --------------------------------------
FN WAIT_KEYPRESS() {
  SET CLEAR_KBD_STROBE[0,1]=0;
  WHILE (NOT KEY_PRESSED()) {}
}
# --------------------------------------
# POSITION CURSOR
# --------------------------------------
FN POSITION_CURSOR(X:1,Y:1) {
  IF (X >= MON_WNDWDTH) { 
    SET X=MON_WNDWDTH-1; 
  }
  IF (Y > 23) { SET Y=23; }
  SET MON_CH[0,1]=X;
  SET MON_CV[0,1]=Y;
  MON_VTAB();
}
# --------------------------------------
# GET NULL-TERMINATED LINE INTO MON_IN
# RETURN - NUMBER OF CHARS READ
# --------------------------------------
FN:1 GET_LINE() {
  MON_GETLN1();
  SET MON_IN[^X,1]=0;
  RETURN ^X;
}
# --------------------------------------
# PRINT A CHARACTER VIA MON_COUT
# --------------------------------------
FN PRINT_CHAR(CHAR:1) {
  SET ^A = (CHAR OR $80);
  MON_COUT();
}
# --------------------------------------
# PRINT A STRING
# --------------------------------------
FN AVM_PRINT_STRING();

FN PRINT_STRING(STR_PTR:2) {
  SET ^X=(@STR_PTR)[0,1];
  SET ^A=(@STR_PTR)[1,1];
  AVM_PRINT_STRING();
}
# --------------------------------------
# PRINT A NUMBER AS HEX DIGITS
# --------------------------------------
FN PRINT_HEX(N_PTR:2,SIZE:1) {
   VAR I:1=SIZE;
   WHILE (I > 0) {
     SET ^A=N_PTR[I-1,1];
     MON_PRBYTE();
     DECR I;
   }
} 
# --------------------------------------
# SET INVERSE VIDEO
# --------------------------------------
FN INVERSE() {
  SET MON_INVFLG[0,1]=$3F;
}
# --------------------------------------
# SET FLASHING VIDEO
# --------------------------------------
FN FLASH() {
  SET MON_INVFLG[0,1]=$7F;
}
# --------------------------------------
# SET NORMAL VIDEO
# --------------------------------------
FN NORMAL() {
  SET MON_INVFLG[0,1]=$FF;
}

