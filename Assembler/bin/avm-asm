#!/usr/bin/perl

use strict;

sub get_size_from_arg(@);
sub emit(@);
sub assemble_instr(@);
sub assemble_unsized_instr(@);
sub emit_instr(@);
sub emit_opcode(@);
sub emit_address(@);
sub emit_inline_comment(@);
sub emit_line_end();
sub emit_byte_as_hex(@);
sub assemble_sized_instr(@);
sub assemble_signed_instr(@);
sub get_size_of_const(@);
sub emit_constant(@);
sub emit_HS(@);

my %unsized_instrs = (
  "BRF" => { "opcode" => 1 },
  "BRU" => { "opcode" => 2 },
  "CFD" => { "opcode" => 3 },
  "CFI" => { "opcode" => 4 }
);

my %sized_instrs = (
  "ADD" => { "opcode" => 1<<3 },
  "ANL" => { "opcode" => 2<<3 },
  "DCR" => { "opcode" => 3<<3 },
  "DSP" => { "opcode" => 4<<3 },
  "ICR" => { "opcode" => 5<<3 },
  "ISP" => { "opcode" => 6<<3 },
  "MTS" => { "opcode" => 7<<3 },
  "MTV" => { "opcode" => 8<<3 },
  "NEG" => { "opcode" => 9<<3 },
  "NOT" => { "opcode" => 10<<3 },
  "ORL" => { "opcode" => 11<<3 },
  "ORX" => { "opcode" => 12<<3 },
  "PHC" => { "opcode" => 13<<3 },
  "PVA" => { "opcode" => 14<<3 },
  "RAF" => { "opcode" => 15<<3 },
  "SHL" => { "opcode" => 16<<3 },
  "STM" => { "opcode" => 17<<3 },
  "SUB" => { "opcode" => 18<<3 },
  "TEQ" => { "opcode" => 19<<3 },
  "VTM" => { "opcode" => 20<<3 }
);

my %signed_instrs = (
  "DIV" => { "opcode" => 21<<3 },
  "EXT" => { "opcode" => 22<<3 },
  "MUL" => { "opcode" => 23<<3 },
  "SHR" => { "opcode" => 24<<3 },
  "TGE" => { "opcode" => 25<<3 },
  "TGT" => { "opcode" => 26<<3 },
  "TLE" => { "opcode" => 27<<3 },
  "TLT" => { "opcode" => 28<<3 }
);
  
my $line_num=1;

while (<>) {
  my $line = $_;
  if ($line =~ /^\*/) {
    # Pass comments through
    print $line;
  }
  elsif ($line =~ /^\s+(\w\w\w)(.*)/) {
    # Attempt to assemble instruction
    my $mnemonic=$1;
    my $arg=$2;
    if ($arg =~ /^\s*(\S*)/) {
      $arg=$1;
    }
    if (!assemble_instr($mnemonic,$arg)) {
      print $line;
    }
  }
  else {
    # Pass everything else through
    print $line;
  }
  ++$line_num;
}

sub assemble_instr(@) {
  (my $mnemonic, my $arg)=@_;
  my $instr=$unsized_instrs{$mnemonic};
  # Try for an unsized instruction
  if ($instr) {
    assemble_unsized_instr($instr,$mnemonic,$arg);
    return 1;
  }
  # Otherwise try for a sized instruction
  $instr=$sized_instrs{$mnemonic};
  if ($instr) {
    assemble_sized_instr($instr,$mnemonic,$arg);
    return 1;
  }
  # Otherwise try for a signed instruction
  $instr=$signed_instrs{$mnemonic};
  if ($instr) {
    assemble_signed_instr($instr,$mnemonic,$arg);
    return 1;
  }
  # Otherwise fail
  return 0;
}

sub assemble_unsized_instr(@) {
  (my $instr, my $mnemonic, my $arg)=@_;
  emit_instr(".HS");
  emit_space();
  emit_byte_as_hex($instr->{"opcode"});
  emit_inline_comment("$mnemonic $arg");
  emit_line_end();
  emit_address($arg);
}

sub assemble_sized_instr(@) {
  (my $instr, my $mnemonic, my $arg)=@_;
  my $opcode=$instr->{"opcode"};
  my $size;
  my $target;
  my $phc_const;

  # Get size, phc_const, target
  if ($mnemonic eq "PHC") {
    # PHC case
    if ($arg =~ /^\$(.*)/) {
      # Numeric constant given
      $phc_const=$1;
      $size=get_size_of_const($phc_const);     
    }
    else {
      # Label given; size=2
      $size=2;
    }
  }
  elsif ($arg =~ /(.*)(?:(?:<-)|(?:->))(.*)/) {
    # VTM or MTV case
    $size=get_size_from_arg($1);
    $target=get_size_from_arg($2);
  }
  else {
    $size=get_size_from_arg($arg);
  }

  # Emit opcode
  if ($size > 0 && $size < 8) {
    emit_HS($opcode | $size);
  }
  else {
    emit_HS($opcode);
  }
  emit_inline_comment("$mnemonic $arg");
  emit_line_end();

  # Emit additional size byte
  if ($size == 0 || $size >= 8) {
    emit_HS($size);
    emit_line_end();
  }

  # Emit target
  if ($target) {
    emit_HS($target);
    emit_line_end();
  }

  # Emit PHC constant
  if ($mnemonic eq "PHC") {
    if ($arg =~ /^\$(.*)/) {
      emit_constant($phc_const);
    }
    else {
      emit_instr(".DA");
      emit_space();
      emit($arg);
      emit_line_end();
    }
  }
}

sub emit_HS(@) {
  my $arg=shift @_;
  emit_instr(".HS");
  emit_space();
  emit_byte_as_hex($arg);
}

sub get_size_of_const(@) {
  my $const=hex shift @_;
  my $size=0;
  do {
    $const = $const>>8;
    $size++;
  } while ($const>0);
  return $size;
}

my $MAX_CONST_LEN=10;

sub emit_constant(@) {
  my $const=shift @_;
  $const=hex $const;
  do {
    emit_HS($const & 0xFF);
    emit_line_end();
    $const = $const>>8;
  } while ($const > 0);
}

sub assemble_signed_instr(@) {
  (my $instr, my $mnemonic, my $arg)=@_;
  my $opcode=$instr->{"opcode"};
  my $size=get_size_from_arg($arg);
  if ($arg =~ /(.*)S$/) {
      $opcode |= (1<<2);
  }

  # Emit opcode
  if ($size > 0 && $size < 4) {
    emit_HS($opcode | $size);
  }
  else {
    emit_HS($opcode);
  }
  emit_inline_comment("$mnemonic $arg");
  emit_line_end();

  # Emit additional size byte
  if ($size == 0 || $size >= 4) {
    emit_HS($size);
    emit_line_end();
  }
}

sub emit(@) {
  print shift @_;
}

sub emit_byte_as_hex(@) {
  (my $byte) = @_;
  printf "%02X", $byte;
}

sub emit_address(@) {
  (my $addr) = @_;
  emit_instr(".DA");
  emit_space();
  print $addr;
  emit_line_end;
}

sub emit_inline_comment(@) {
  (my $comment) = @_;
  print "\t$comment";
}

sub emit_line_end() {
  print "\n";
}

sub emit_instr(@) {
  (my $instr) = @_;
  print "\t$instr";
}

sub emit_space() {
    print " ";
}

sub get_size_from_arg(@) {
  (my $arg)=@_;
  if ($arg =~ /^(.*)S$/) {
      $arg=$1;
  }
  if ($arg =~ /^\$(\S+)/) {
    return hex $1;
  }
  return $arg;
}

