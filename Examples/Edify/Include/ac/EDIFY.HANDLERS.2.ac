# -----------------------------------
# EDIFY COMMAND HANDLERS, PART 2
# -----------------------------------
# (I)NSERT
# -----------------------------------
DATA I_MSG "TYPE LINES TO INSERT, BLANK LINE TO END\$0D";

FN I_HANDLER() {
  VAR LEN:1;
  IF (BUF_SIZE=0)
    A_HANDLER();
  ELSE IF (EQ_CHAR(READ_CHAR(),'B')) {
    NEXT_CHAR();
    TODO();
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'L')) {
    NEXT_CHAR();
    IF ((@FILE_NAME)[0,1]=0)
      ERROR(FILE_NAME_NOT_SET);
    ELSE
      READ_AND_INSERT();
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'T')) {
    NEXT_CHAR();
    SET MON_IN[0,1]=0;
    BUF_INSERT_LINE(MON_IN,0);
  }
  ELSE {
    PRINT_STRING(I_MSG);
    WHILE (NOT ERR_FLAG) {
      SET LEN=GET_BUF_LINE(N);
      IF (LEN=0) RETURN;
      BUF_INSERT_LINE(MON_IN,LEN);
    }
  }
}
# -----------------------------------
# MAR(K)
# -----------------------------------
FN K_HANDLER() {
  VAR NEW_K:2;
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    SET NEW_K=PARSE_NUM();
    IF (NOT ERR_FLAG) {
      IF (NEW_K < 1 OR NEW_K > BUF_SIZE)
        ERROR(OUT_OF_RANGE);
      ELSE
        SET_K(NEW_K);
    }
  }
  ELSE IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE IF (K=NO_K)
    ERROR(MARK_NOT_SET);
  ELSE PRINT_LINE(K_PTR,K);
}
# -----------------------------------
# (M)ATCH
# -----------------------------------
VAR SEARCH_NUM:2;
VAR SEARCH_PTR:2;

FN M_HANDLER() {
  VAR MATCH_PTR:2;
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN;
  }
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    IF (READ_CHAR()=NO_CHAR) {
      ERROR(EXPECTED_PATTERN);
      RETURN;
    }
    SET PATTERN=(@INPUT)[INPUT_IDX,32];
    SET INPUT_IDX=INPUT_LEN;
    SET SEARCH_NUM=N;
    SET SEARCH_PTR=N_PTR;
  }
  ELSE IF ((@PATTERN)[0,1]=0) {
    ERROR(PATTERN_NOT_SET);
    RETURN;
  }
  WHILE (SEARCH_NUM <= BUF_SIZE) {
    SET MATCH_PTR=
      MATCH(SEARCH_PTR+1,@PATTERN);
    IF (NOT (MATCH_PTR=-1)) {
      PRINT_LINE(SEARCH_PTR,SEARCH_NUM);
      SET N=SEARCH_NUM;
      SET N_PTR=SEARCH_PTR;
    }
    NEXT_LINE_PTR(@SEARCH_PTR);
    INCR SEARCH_NUM;
    IF (NOT (MATCH_PTR=-1))
      RETURN;
  }
}
# -----------------------------------
# CURRENT LI(N)E
# -----------------------------------
FN N_HANDLER() {
  VAR NEW_N:2;
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    SET NEW_N=PARSE_NUM();
    IF (NOT ERR_FLAG) {
      IF (NEW_N < 1 OR NEW_N > BUF_SIZE)
        ERROR(OUT_OF_RANGE);
      ELSE
        SET_N(NEW_N);
    }
  }
  ELSE IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
  }
  ELSE {
    PRINT_LINE(N_PTR,N);
  }
}
# -----------------------------------
# (R)EPLACE
# -----------------------------------
FN R_HANDLER() {
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN;
  }
  IF ((@PATTERN)[0,1]=0) {
    ERROR(PATTERN_NOT_SET);
    RETURN;
  }
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    IF (READ_CHAR()=NO_CHAR)
      SET (@REPL)[0,1]=0;
    ELSE {
      SET (@REPL)[0,32]=(@INPUT)[INPUT_IDX,32];
      SET INPUT_IDX=INPUT_LEN;
    }
  }
  BUF_REPLACE();
  SET SEARCH_NUM=N+1;
  SET SEARCH_PTR=N_PTR+N_PTR[0,1]+3;
}
