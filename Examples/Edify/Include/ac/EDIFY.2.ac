# -----------------------------------
# EDIFY, PART 2
# -----------------------------------
# PARSE NUMERIC ARGUMENT
# -----------------------------------
FN:2 PARSE_NUM() {
  VAR CH:1=READ_CHAR();
  IF (EQ_CHAR(CH,'K')) {
    RETURN K_AS_NUM();
  }
  ELSE IF (EQ_CHAR(CH,'E')) {
    RETURN E_AS_NUM();
  }
  ELSE IF (EQ_CHAR(CH,'N')) {
    RETURN N_AS_NUM();
  }
  ELSE IF (EQ_CHAR(CH,'W')) {
    RETURN W_AS_NUM();
  }
  RETURN LITERAL_NUM();
}

FN:2 K_AS_NUM() {
  NEXT_CHAR();
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN -1;
  }
  ELSE IF (K=NO_K) {
    ERROR(MARK_NOT_SET);
    RETURN -1;
  }
  RETURN K;
}

FN:2 E_AS_NUM() {
  NEXT_CHAR();
  RETURN BUF_SIZE;
}

FN:2 N_AS_NUM() {
  NEXT_CHAR();
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN -1;
  }
  RETURN N;
}

FN:2 W_AS_NUM() {
  NEXT_CHAR();
  RETURN W;
}

FN:2 LITERAL_NUM() {
  VAR I:1=0;
  VAR DONE:1=FALSE;
  VAR NUM:2;
  VAR CH:1;
  WHILE ((I < 5) AND NOT DONE) {
    SET CH=READ_CHAR();
    IF (IS_DIGIT(CH)) {
      SET (@NUM_STR)[I,1]=CH;
      NEXT_CHAR();
      INCR I;      
    }
    ELSE {
      SET (@NUM_STR)[I,1]=0;
      SET DONE=TRUE;
    }
  }
  IF (I > 0) {
    STR_TO_NUM(@NUM_STR,10,@NUM,2);
    RETURN NUM;
  }
  ERROR(EXPECTED_NUM_ARG);    
  RETURN -1;
}

FN:1 IS_DIGIT(CH:1) {
  SET CH=CH AND $7F;
  RETURN (CH >= '0') AND (CH <= '9');
}
# -----------------------------------
# TODO MESSAGE
# -----------------------------------
DATA TODO_MSG "TO DO\$0D";
FN TODO() {
  PRINT_STRING(TODO_MSG);
}
  
