# -----------------------------------
# EDIFY: EDIT BUFFER, PART 1
# -----------------------------------
# BUFFER MODIFIED?
VAR MODIFIED:1=FALSE;
# NUMBER OF LINES IN BUFFER
VAR BUF_SIZE:2=0;
# START OF BUFFER
VAR BUF_START:2;
# END OF BUFFER
VAR BUF_END:2;
# NUMBER OF LINE BEING EDITED
VAR N:2;
# PTR TO LINE BEING EDITED
VAR N_PTR:2;
# MARK
VAR K:2=NO_K;
# PTR TO MARKED LINE
VAR K_PTR:2;
# -----------------------------------
# CLEAR THE BUFFER
# -----------------------------------
FN CLEAR_BUFFER() {
  SET BUF_SIZE=0;
  SET BUF_END=BUF_START;
  SET CB_END=CB_START;  
  SET N=1;
  SET N_PTR=BUF_START;
}
# -----------------------------------
# GET LINE TO ADD TO BUFFER
# -----------------------------------
FN:1 GET_BUF_LINE(NUM:1) {
  IF (PRINT_LINE_NUMS) {
    PRINT_LINE_NUM(NUM);
    PRINT_CHAR(' ');
  }
  RETURN GET_LINE();
}
# -----------------------------------
# APPEND LINE TO BUFFER
# -----------------------------------
FN BUF_APPEND_LINE(STR:2,LEN:1) {
  IF (BUF_END+LEN+1 > CB_END)
    ERROR(OUT_OF_MEMORY);
  ELSE {
    SET BUF_END[0,1]=LEN;
    INCR BUF_END;
    COPY(STR,LEN+1,BUF_END);
    SET BUF_END=BUF_END+LEN+1;
    SET BUF_END[0,1]=LEN;
    INCR BUF_END;
    INCR BUF_SIZE;
  }
}
# -----------------------------------
# INSERT LINE INTO BUFFER
# -----------------------------------
FN BUF_INSERT_LINE(STR:2,LEN:1) {
  IF (BUF_END+LEN+3 > CB_END)
    ERROR(OUT_OF_MEMORY);
  ELSE {
    COPY(N_PTR,BUF_END-N_PTR+1,N_PTR+LEN+3);
    SET BUF_END=BUF_END+LEN+3;
    SET N_PTR[0,1]=LEN;
    COPY(STR,LEN+1,N_PTR+1);
    SET N_PTR[LEN+2,1]=LEN;
    SET_N(N+1);
    INCR BUF_SIZE;
  }
}
# -----------------------------------
# DELETE CURRENT LINE FROM BUFFER
# -----------------------------------
FN BUF_DELETE_LINE() {
  VAR SAVED_N:2=N;
  VAR SAVED_N_PTR:2=N_PTR;
  VAR LEN:2;
  IF (BUF_SIZE=1)
    CLEAR_BUFFER();
  ELSE IF (N=BUF_SIZE) {
    SET BUF_END=N_PTR;
    DECR BUF_SIZE;
    SET_N(BUF_SIZE);
  }
  ELSE {
    SET_N(N+1);
    SET LEN=BUF_END-N_PTR;
    COPY(N_PTR,LEN,SAVED_N_PTR);    
    SET BUF_END[0,2]=SAVED_N_PTR+LEN;
    SET N=SAVED_N;
    SET N_PTR=SAVED_N_PTR;
    DECR BUF_SIZE;
  }
}
# -----------------------------------
# REPLACE PATTERN IN CURRENT LINE
# -----------------------------------
# BUFFER FOR MODIFIED LINE
VAR REPL_BUF:255;

# BOUND LENGTH TO BUFFER SIZE
FN BOUND(BUF_LEN:2,LEN_PTR:2) {
  VAR LEN:2=LEN_PTR[0,2];
  IF (BUF_LEN+LEN > 254)
    SET LEN_PTR[0,2]=254-BUF_LEN;
}

FN BUF_REPLACE() {
  VAR LINE_PTR:2=N_PTR+1;
  VAR BUF_PTR:2=@REPL_BUF;
  VAR MATCH_PTR:2=MATCH(LINE_PTR,@PATTERN);
  VAR PAT_LEN:2=STRING_LEN(@PATTERN);
  VAR REPL_LEN:2=STRING_LEN(@REPL);
  VAR LEN:2;
  VAR BUF_LEN:2=0;
  IF (MATCH_PTR=-1) RETURN;
  WHILE (NOT (MATCH_PTR=-1)) {
    SET LEN=MATCH_PTR-LINE_PTR;
    BOUND(BUF_LEN,@LEN);
    COPY(LINE_PTR,LEN,BUF_PTR);
    SET LINE_PTR=LINE_PTR+LEN;
    SET BUF_PTR=BUF_PTR+LEN;
    SET BUF_LEN=BUF_LEN+LEN;
    BOUND(BUF_LEN,@REPL_LEN);
    COPY(@REPL,REPL_LEN,BUF_PTR);
    SET LINE_PTR=LINE_PTR+PAT_LEN;
    SET BUF_LEN=BUF_LEN+REPL_LEN;
    SET BUF_PTR=BUF_PTR+REPL_LEN;
    SET MATCH_PTR=MATCH(LINE_PTR,@PATTERN);
  }
  SET LEN=STRING_LEN(LINE_PTR);
  BOUND(BUF_LEN,@LEN);
  COPY(LINE_PTR,LEN,BUF_PTR);
  SET BUF_PTR[LEN,1]=0;
  SET BUF_LEN=BUF_LEN+LEN;
  IF (N < BUF_SIZE) {
    SET MATCH_PTR=N_PTR;
    NEXT_LINE_PTR(@MATCH_PTR);
    COPY(MATCH_PTR,BUF_END-MATCH_PTR,
     N_PTR+BUF_LEN+3);
  }
  SET BUF_END=BUF_END+BUF_LEN-N_PTR[0,1];
  SET N_PTR[0,1]=BUF_LEN;
  COPY(@REPL_BUF,BUF_LEN+1,N_PTR+1);
  SET N_PTR[BUF_LEN+2,1]=BUF_LEN;
  PRINT_LINE(N_PTR,N);
}
