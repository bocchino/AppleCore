# -----------------------------------
# EDIFY COMMAND HANDLERS
# -----------------------------------
# (A)PPEND
# -----------------------------------
DATA A_MSG "TYPE LINES TO APPEND, BLANK LINE TO END\$0D";

FN A_HANDLER() {
  VAR LEN:1;
  VAR CB_LEN:2;
  SET MODIFIED=TRUE;
  IF (EQ_CHAR(READ_CHAR(),'B')) {
    NEXT_CHAR();
    IF (CB_SIZE > 0) {
      SET CB_LEN=CB_END-CB_START;
      IF (BUF_END+CB_LEN > CB_START)
        ERROR(OUT_OF_MEMORY);
      ELSE {
        COPY(CB_START,CB_LEN,BUF_END);
        SET BUF_END=BUF_END+CB_LEN;
	SET BUF_SIZE=BUF_SIZE+CB_SIZE;
      }
    }
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'L')) {
    NEXT_CHAR();
    IF ((@FILE_NAME)[0,1]=0)
      ERROR(FILE_NAME_NOT_SET);
    ELSE
      READ_AND_APPEND();
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'T')) {
    NEXT_CHAR();
    SET MON_IN[0,1]=0;
    BUF_APPEND_LINE(MON_IN,0);
  }
  ELSE {
    PRINT_STRING(A_MSG);
    WHILE (NOT ERR_FLAG) {
      SET LEN=GET_BUF_LINE(BUF_SIZE+1);
      IF (LEN=0) RETURN;
      BUF_APPEND_LINE(MON_IN,LEN);
    }
  }
}
# -----------------------------------
# PRINT CLIP(B)OARD
# -----------------------------------
FN B_HANDLER() {
  VAR CB_PTR:2=CB_START;
  WHILE (CB_PTR < CB_END) {
    PRINT_STRING(CB_PTR+1);
    MON_CROUT();
    SET CB_PTR=CB_PTR+CB_PTR[0,1]+3;
  }
}
# -----------------------------------
# (C)LEAR BUFFER
# -----------------------------------
DATA CLEAR_MSG "CLEAR BUFFER (Y/N)? ";

FN C_HANDLER() {
  VAR CH:1;
  GET_INPUT(CLEAR_MSG);
  IF (EQ_CHAR(MON_IN[0,1],'Y')) {
    CLEAR_BUFFER();
    CLEAR_CB();
  }
  SET MODIFIED=FALSE;
}
# -----------------------------------
# (D)ELETE LINE
# -----------------------------------
FN D_HANDLER() {
  IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE
    BUF_DELETE_LINE();
}
# -----------------------------------
# (E)NDING LINE
# -----------------------------------
DATA ENDING_LINE "ENDING LINE=";

FN E_HANDLER() {
  IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE {
    PRINT_STRING(ENDING_LINE);
    PRINT_NUM(BUF_SIZE);
    MON_CROUT();
  }
}
# -----------------------------------
# (F)ILE
# -----------------------------------
DATA FNAME "FILE NAME=";

FN F_HANDLER() {
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    IF (EQ_CHAR(READ_CHAR(),NO_CHAR))
      ERROR(EXPECTED_FILE_NAME);
    ELSE
      SET (@FILE_NAME)[0,32]=
        (@INPUT)[INPUT_IDX,32];
    SET INPUT_IDX=INPUT_LEN;
  }
  ELSE IF ((@FILE_NAME)[0,1]=0)
    ERROR(FILE_NAME_NOT_SET);
  ELSE {
    PRINT_STRING(FNAME);
    PRINT_STRING(@FILE_NAME);
    MON_CROUT();
  }
}
# -----------------------------------
# (H)ELP
# -----------------------------------
DATA HELP_FILE_NAME "EDIFY.HELP.TXT";

FN H_HANDLER() {
  VAR LN:1=0;
  ISSUE_DOS_CMD(DOS_OPEN,HELP_FILE_NAME);
  ISSUE_DOS_CMD(DOS_READ,HELP_FILE_NAME);
  IF (NOT ERR_FLAG) {
    WHILE (DOS_ERRNO[0,1]=0) {
      READ_LINE();
      MON_CROUT();
      IF (DOS_ERRNO[0,1]=0) {
        PRINT_STRING(MON_IN);
	MON_CROUT();
        INCR LN;
      }
      IF (LN >= MON_WNDBTM[0,1]-3) {
        SET ^A=' '+$80;
        MON_KEYIN();
	SET LN=0;
      }
    }
    PRINT_STRING(DOS_CLOSE);
  }
}
# -----------------------------------
# (I)NSERT
# -----------------------------------
DATA I_MSG "TYPE LINES TO INSERT, BLANK LINE TO END\$0D";

FN I_HANDLER() {
  VAR LEN:1;
  VAR CB_LEN:2;
  VAR COPY_LEN:2;
  IF (BUF_SIZE=0)
    A_HANDLER();
  ELSE IF (EQ_CHAR(READ_CHAR(),'B')) {
    NEXT_CHAR();
    IF (CB_SIZE > 0) {
      SET CB_LEN=CB_END-CB_START;
      IF (BUF_END+CB_LEN >= CB_START)
        ERROR(OUT_OF_MEMORY);
      ELSE {
        SET COPY_LEN=BUF_END-N_PTR;
        COPY(N_PTR,COPY_LEN,N_PTR+CB_LEN);
	COPY(CB_START,CB_LEN,N_PTR);
	SET BUF_SIZE=BUF_SIZE+CB_SIZE;
      }
    }
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'L')) {
    NEXT_CHAR();
    IF ((@FILE_NAME)[0,1]=0)
      ERROR(FILE_NAME_NOT_SET);
    ELSE
      READ_AND_INSERT();
  }
  ELSE IF (EQ_CHAR(READ_CHAR(),'T')) {
    NEXT_CHAR();
    SET MON_IN[0,1]=0;
    BUF_INSERT_LINE(MON_IN,0);
  }
  ELSE {
    PRINT_STRING(I_MSG);
    WHILE (NOT ERR_FLAG) {
      SET LEN=GET_BUF_LINE(N);
      IF (LEN=0) RETURN;
      BUF_INSERT_LINE(MON_IN,LEN);
    }
  }
}
# -----------------------------------
# MAR(K)
# -----------------------------------
FN K_HANDLER() {
  VAR NEW_K:2;
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    SET NEW_K=PARSE_NUM();
    IF (NOT ERR_FLAG) {
      IF (NEW_K < 1 OR NEW_K > BUF_SIZE)
        ERROR(OUT_OF_RANGE);
      ELSE
        SET_K(NEW_K);
    }
  }
  ELSE IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE IF (K=NO_K)
    ERROR(MARK_NOT_SET);
  ELSE PRINT_LINE(K_PTR,K);
}
# -----------------------------------
# (M)ATCH
# -----------------------------------
VAR SEARCH_NUM:2;
VAR SEARCH_PTR:2;

FN M_HANDLER() {
  VAR MATCH_PTR:2;
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN;
  }
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    IF (READ_CHAR()=NO_CHAR) {
      ERROR(EXPECTED_PATTERN);
      RETURN;
    }
    SET PATTERN=(@INPUT)[INPUT_IDX,32];
    SET INPUT_IDX=INPUT_LEN;
    SET SEARCH_NUM=N;
    SET SEARCH_PTR=N_PTR;
  }
  ELSE IF ((@PATTERN)[0,1]=0) {
    ERROR(PATTERN_NOT_SET);
    RETURN;
  }
  WHILE (SEARCH_NUM <= BUF_SIZE) {
    SET MATCH_PTR=
      MATCH(SEARCH_PTR+1,@PATTERN);
    IF (NOT (MATCH_PTR=-1)) {
      PRINT_LINE(SEARCH_PTR,SEARCH_NUM);
      SET N=SEARCH_NUM;
      SET N_PTR=SEARCH_PTR;
    }
    NEXT_LINE_PTR(@SEARCH_PTR);
    INCR SEARCH_NUM;
    IF (NOT (MATCH_PTR=-1))
      RETURN;
  }
}
# -----------------------------------
# CURRENT LI(N)E
# -----------------------------------
FN N_HANDLER() {
  VAR NEW_N:2;
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    SET NEW_N=PARSE_NUM();
    IF (NOT ERR_FLAG) {
      IF (NEW_N < 1 OR NEW_N > BUF_SIZE)
        ERROR(OUT_OF_RANGE);
      ELSE
        SET_N(NEW_N);
    }
  }
  ELSE IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
  }
  ELSE {
    PRINT_LINE(N_PTR,N);
  }
}
# -----------------------------------
# (R)EPLACE
# -----------------------------------
FN R_HANDLER() {
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN;
  }
  IF ((@PATTERN)[0,1]=0) {
    ERROR(PATTERN_NOT_SET);
    RETURN;
  }
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    IF (READ_CHAR()=NO_CHAR)
      SET (@REPL)[0,1]=0;
    ELSE {
      SET (@REPL)[0,32]=(@INPUT)[INPUT_IDX,32];
      SET INPUT_IDX=INPUT_LEN;
    }
  }
  BUF_REPLACE();
  SET SEARCH_NUM=N+1;
  SET SEARCH_PTR=N_PTR+N_PTR[0,1]+3;
}
# -----------------------------------
# (S)AVE
# -----------------------------------
FN S_HANDLER() {
  IF ((@FILE_NAME)[0,1]=0)
    ERROR(FILE_NAME_NOT_SET);
  ELSE IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE {
    WRITE_BUFFER();
    SET MODIFIED=FALSE;
  }
}
# -----------------------------------
# (V)IEW
# -----------------------------------
FN V_HANDLER() {
  VAR I:2=0;
  VAR LINE_PTR:2=N_PTR;
  IF (BUF_SIZE=0) {
    ERROR(BUFFER_EMPTY);
    RETURN;
  }
  WHILE (I < W AND (N+I<=BUF_SIZE)) {
    PRINT_LINE(LINE_PTR,N+I);
    NEXT_LINE_PTR(@LINE_PTR);
    INCR I;
  }
}
# -----------------------------------
# (W)INDOW SIZE
# -----------------------------------
DATA WINDOW_SIZE "WINDOW SIZE=";

FN W_HANDLER() {
  VAR NEW_W:2;
  IF (EQ_CHAR(READ_CHAR(),BINDING_CHAR)) {
    NEXT_CHAR();
    SET NEW_W=PARSE_NUM();
    IF (NOT ERR_FLAG) {
      IF (NEW_W=0)
        ERROR(OUT_OF_RANGE);
      ELSE
        SET W=NEW_W;
    }    
  }
  ELSE {
    PRINT_STRING(WINDOW_SIZE);
    PRINT_NUM(W);
    MON_CROUT();
  }
}
# -----------------------------------
# E(X)TRACT
# -----------------------------------
FN X_HANDLER() {
  VAR X_START:2;
  VAR X_LEN:2;
  Y_HANDLER();
  IF (NOT ERR_FLAG) {
    SET X_START=Y_LOW_PTR+Y_LEN;
    SET X_LEN=BUF_END-X_START;
    COPY(X_START,X_LEN,Y_LOW_PTR);
    SET BUF_SIZE=BUF_SIZE-CB_SIZE;
  }
}
# -----------------------------------
# COP(Y)
# -----------------------------------
VAR Y_LOW_PTR:2;
VAR Y_HI_PTR:2;
VAR Y_LEN:2;

FN Y_HANDLER() {
  VAR SAVED_CB_SIZE:2=CB_SIZE;
  IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE IF (K=NO_K)
    ERROR(MARK_NOT_SET);
  ELSE {
    IF (K_PTR < N_PTR) {
      SET Y_LOW_PTR=K_PTR;
      SET Y_HI_PTR=N_PTR;
      SET CB_SIZE=N-K+1;
    }
    ELSE {
      SET Y_LOW_PTR=N_PTR;
      SET Y_HI_PTR=K_PTR;
      SET CB_SIZE=K-N+1;
    }
    SET Y_LEN=(Y_HI_PTR-Y_LOW_PTR)+
      (Y_HI_PTR[0,1])+3;
    SET CB_START=CB_END-Y_LEN;
    IF (CB_START <= BUF_END) {
      # DON'T CRASH INTO BUFFER
      ERROR(OUT_OF_MEMORY);
      SET CB_SIZE=SAVED_CB_SIZE;
    }
    ELSE {
      COPY(Y_LOW_PTR,Y_LEN,CB_START);
    }
  }
}
# -----------------------------------
# '+'
# -----------------------------------
FN PLUS_HANDLER() {
  IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE {
    IF (N+W > BUF_SIZE)
      SET_N(BUF_SIZE);
    ELSE SET_N(N+W);
  }
}
# -----------------------------------
# '-'
# -----------------------------------
FN MINUS_HANDLER() {
  IF (BUF_SIZE=0)
    ERROR(BUFFER_EMPTY);
  ELSE {
    IF (N <= W)
      SET_N(1);
    ELSE SET_N(N-W);
  }
}
# -----------------------------------
# '#'
# -----------------------------------
FN NUM_HANDLER() {
  SET PRINT_LINE_NUMS=
    NOT PRINT_LINE_NUMS;
}
