# -----------------------------------
# BELOW THE BASEMENT: OBJECTS
# -----------------------------------
CONST NUM_OBJS 14;
# -----------------------------------
# OBJECT IDENTIFIERS
# -----------------------------------
CONST OBJ_STOOL    0;
CONST OBJ_SWITCH   1;
CONST OBJ_OUTLET   2;
CONST OBJ_CLOSET   3;
CONST OBJ_KEY	   4;
CONST OBJ_STOPPER  5;
CONST OBJ_GLASS    6;
CONST OBJ_CANOE	   7;
CONST OBJ_PADDLE   8;
CONST OBJ_HAMMER   9;
CONST OBJ_SIGN     10;
CONST OBJ_PAPER    11;
CONST OBJ_DOOR     12;
CONST OBJ_WRITING  13;

CONST OBJ_NONE     $FF;
# -----------------------------------
# OBJECT NAMES
# -----------------------------------
DATA OBJ_NAMES WORD_STEP;
DATA 	       WORD_STOOL;

DATA 	       WORD_ELECTRIC;
DATA	       WORD_SWITCH;

DATA           WORD_NULL;
DATA           WORD_OUTLET;

DATA           WORD_NULL;
DATA	       WORD_CLOSET;

DATA	       WORD_SKELETON;
DATA	       WORD_KEY;

DATA	       WORD_NULL;
DATA	       WORD_STOPPER;

DATA	       WORD_MAGNIFYING;
DATA	       WORD_GLASS;

DATA	       WORD_NULL;
DATA	       WORD_CANOE;

DATA	       WORD_NULL;
DATA	       WORD_PADDLE;

DATA	       WORD_NULL;
DATA	       WORD_HAMMER;

DATA	       WORD_NULL;
DATA	       WORD_SIGN;

DATA	       WORD_NULL;
DATA	       WORD_PAPER;

DATA	       WORD_NULL;
DATA	       WORD_DOOR;

DATA	       WORD_NULL;
DATA	       WORD_WRITING;
# -----------------------------------
# OBJECT KEYWORDS
# -----------------------------------
DATA WORD_STOOL      "STOOL";
DATA WORD_STEP       "STEP";
DATA WORD_ELECTRIC   "ELECTRIC";
DATA WORD_SWITCH     "SWITCH";
DATA WORD_OUTLET     "OUTLET";
DATA WORD_CLOSET     "CLOSET";
DATA WORD_SKELETON   "SKELETON";
DATA WORD_KEY        "KEY";
DATA WORD_STOPPER    "STOPPER";
DATA WORD_MAGNIFYING "MAGNIFYING";
DATA WORD_GLASS	     "GLASS";
DATA WORD_CANOE	     "CANOE";
DATA WORD_PADDLE     "PADDLE";
DATA WORD_HAMMER     "HAMMER";
DATA WORD_SIGN	     "SIGN";
DATA WORD_PAPER	     "PAPER";
DATA WORD_DOOR	     "DOOR";
DATA WORD_WRITING    "WRITING";

DATA WORD_NULL     0;
# -----------------------------------
# EXTERN VARIABLE DECLARATION
# -----------------------------------
FN OBJS_START();
# -----------------------------------
# LOAD MODULE FOR OBJECTS
# -----------------------------------
DATA OBJS_STR "OBJECTS.";

FN LOAD_OBJ_MODULE_FOR(OBJ:1) {
  SET_MODULE_TO(OBJ);
  IF (NOT (GET_OBJ_MODULE()=MODULE)) {
    SET (@FILE_NAME)[0,8]=OBJS_STR[0,8];
    NUM_TO_STR(@MODULE,1,10,@FILE_NAME+8);
    SET (@FILE_NAME)[9,5]=OBJ_STR[0,5];
    ISSUE_DOS_CMD(DOS_BLOAD,@FILE_NAME);
  }
}
# -----------------------------------
# GET CURRENT OBJECT MODULE
# -----------------------------------
FN:1 GET_OBJ_MODULE() {
  RETURN OBJ_MODULE[0,1];
}
# -----------------------------------
# FIND OBJECT BY NAME
# -----------------------------------
FN:1 FIND_OBJ(OBJ:2) {
  VAR OBJ_ID:1;
  # LOOK IN ROOM
  SET OBJ_ID=
    FIND_OBJ_IN_RM(OBJ);
  # OTHERWISE LOOK IN INVENTORY
  IF (OBJ_ID=OBJ_NONE)
    SET OBJ_ID=FIND_OBJ_IN_INV(OBJ);
  ELSE
    SET INV_IDX=OBJ_NONE;
  RETURN OBJ_ID;
}
# -----------------------------------
# FIND OBJECT BY ID
# -----------------------------------
FN:1 FIND_OBJ_ID(OBJ_ID:1) {
  # LOOK IN ROOM
  IF (FIND_OBJ_ID_IN_RM(OBJ_ID))
    RETURN TRUE;
  # OTHERWISE LOOK IN INVENTORY
  RETURN FIND_OBJ_ID_IN_INV(OBJ_ID);
}
# -----------------------------------
# DELETE OBJECT FROM GAME
# -----------------------------------
FN:1 REMOVE_OBJ_ID(OBJ_ID:1) {
  IF (FIND_OBJ_ID_IN_RM(OBJ_ID)) {
    REMOVE_OBJ_FROM_RM();
    RETURN TRUE;
  }
  IF (FIND_OBJ_ID_IN_INV(OBJ_ID)) {
    REMOVE_FROM_INV();
    RETURN TRUE;
  }
  RETURN FALSE;
}
# -----------------------------------
# PERFORM OBJECT ACTION
# -----------------------------------
FN DO_ACTION_ON(OBJ:1) {
  VAR ACTION_FN:2;
  IF (VB_ID=VB_DROP)
    SET ACTION_FN=DROP_ACTION;
  ELSE {
    LOAD_OBJ_MODULE_FOR(OBJ);
    SET ACTION_FN=OBJ_ACTIONS[2*OFFSET,2];
  }
  ACTION_FN();
}
# -----------------------------------
# DEFAULT ACTION: DOES NOTHING
# -----------------------------------
FN DEFAULT_ACTION() {}
# -----------------------------------
# TAKE ACTION: TAKE AN OBJECT
# -----------------------------------
DATA TAKEN "TAKEN";
DATA TOO_MANY "YOU ARE CARRYING TOO MANY ITEMS.";

FN TAKE_ACTION() {
  IF (VB_ID=VB_TAKE) {
    IF (ADD_TO_INV()) {
      RESPOND(TAKEN);
      REMOVE_OBJ_FROM_RM();
    }
    ELSE RESPOND(TOO_MANY);
  }
}
# -----------------------------------
# DROP ACTION: DROP AN OBJECT
# -----------------------------------
DATA DONT_HAVE "YOU DON'T HAVE IT.";
DATA DROPPED "DROPPED";

DATA HOARD "LET'S NOT HOARD EVERYTHING IN ONE ROOM.";

FN DROP_ACTION() {
  IF (INV_IDX=OBJ_NONE)
    RESPOND(DONT_HAVE);
  ELSE {
    IF (ADD_OBJ_TO_RM()) {
      REMOVE_FROM_INV();
      RESPOND(DROPPED);
    }
    ELSE RESPOND(HOARD);
  }
}
# -----------------------------------
# PRINT OBJECT NAME
# -----------------------------------
FN PRINT_OBJ_NAME(OBJ:1) {
  IF (OBJ_NAMES[4*OBJ,2][0,1]>0) {
    PRINT_STRING(OBJ_NAMES[4*OBJ,2]);
    PRINT_CHAR(' ');
  }
  PRINT_STRING(OBJ_NAMES[4*OBJ+2,2]);
}
# -----------------------------------
# TEST OBJECT NAME AGAINST ID
# -----------------------------------
FN:1 TEST_OBJ_NAME(STR:2,ID:1) {
  VAR NAME_PTR:2=OBJ_NAMES+4*ID;
  RETURN (NOT CMP_STRING(STR,NAME_PTR[0,2]))
    OR (NOT CMP_STRING(STR,NAME_PTR[2,2]));    
}
