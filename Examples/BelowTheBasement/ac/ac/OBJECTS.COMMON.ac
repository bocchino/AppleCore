# -----------------------------------
# BELOW THE BASEMENT: OBJECTS
# -----------------------------------
CONST NUM_OBJS 6;
# -----------------------------------
# OBJECT IDENTIFIERS
# -----------------------------------
CONST OBJ_STOOL    0;
CONST OBJ_SWITCH   1;
CONST OBJ_OUTLET   2;
CONST OBJ_FEATHERS 3;
CONST OBJ_KEY	   4;
CONST OBJ_STOPPER  5;

CONST OBJ_NONE     $FF;
# -----------------------------------
# OBJECT NAMES
# -----------------------------------
DATA OBJ_NAMES WORD_STEP;
DATA 	       WORD_STOOL;

DATA 	       WORD_ELECTRIC;
DATA	       WORD_SWITCH;

DATA           WORD_NULL;
DATA           WORD_OUTLET;

DATA           WORD_NULL;
DATA	       WORD_FEATHERS;

DATA	       WORD_SKELETON;
DATA	       WORD_KEY;

DATA	       WORD_NULL;
DATA	       WORD_STOPPER;
# -----------------------------------
# OBJECT KEYWORDS
# -----------------------------------
DATA WORD_STOOL    "STOOL";
DATA WORD_STEP     "STEP";
DATA WORD_ELECTRIC "ELECTRIC";
DATA WORD_SWITCH   "SWITCH";
DATA WORD_OUTLET   "OUTLET";
DATA WORD_FEATHERS "FEATHERS";
DATA WORD_SKELETON "SKELETON";
DATA WORD_KEY      "KEY";
DATA WORD_STOPPER  "STOPPER";
DATA WORD_NULL     0;
# -----------------------------------
# EXTERN VARIABLE DECLARATION
# -----------------------------------
FN OBJS_START();
# -----------------------------------
# LOAD MODULE FOR OBJECTS
# -----------------------------------
DATA OBJS_STR "OBJECTS.";

FN LOAD_OBJ_MODULE_FOR(OBJ:1) {
  SET_MODULE_TO(OBJ);
  IF (NOT (GET_OBJ_MODULE()=MODULE)) {
    SET FILE_NAME=0;
    SET (@FILE_NAME)[0,8]=OBJS_STR[0,8];
    NUM_TO_STR(@MODULE,1,10,@FILE_NAME+8);
    SET (@FILE_NAME)[9,4]=OBJ_STR[0,4];
    ISSUE_DOS_CMD(DOS_BLOAD,@FILE_NAME);
  }
}
# -----------------------------------
# GET CURRENT OBJECT MODULE
# -----------------------------------
FN:1 GET_OBJ_MODULE() {
  RETURN OBJ_MODULE[0,1];
}
# -----------------------------------
# FIND OBJECT IN SURROUNDINGS
# -----------------------------------
FN:1 FIND_OBJ(OBJ:2) {
  VAR OBJ_ID:1;
  # LOOK IN ROOM
  SET OBJ_ID=
    FIND_OBJ_IN_RM(OBJ);
  # OTHERWISE LOOK IN INVENTORY
  IF (OBJ_ID=OBJ_NONE)
    SET OBJ_ID=FIND_OBJ_IN_INV(OBJ);
  ELSE
    SET INV_IDX=OBJ_NONE;
  RETURN OBJ_ID;
}
# -----------------------------------
# PERFORM OBJECT ACTION
# -----------------------------------
FN DO_ACTION_ON(OBJ:1) {
  VAR ACTION_FN:2;
  IF (VB_ID=VB_DROP)
    SET ACTION_FN=DROP_ACTION;
  ELSE {
    LOAD_OBJ_MODULE_FOR(OBJ);
    SET ACTION_FN=OBJ_ACTIONS[2*OFFSET,2];
  }
  ACTION_FN();
}
# -----------------------------------
# DEFAULT ACTION: DOES NOTHING
# -----------------------------------
FN DEFAULT_ACTION() {}
# -----------------------------------
# TAKE ACTION: TAKE AN OBJECT
# -----------------------------------
DATA TAKEN "TAKEN";

FN TAKE_ACTION() {
  IF (VB_ID=VB_TAKE) {
    PRINT_STRING(TAKEN);
    REMOVE_OBJ_FROM_RM();
    ADD_TO_INV();
    SET RESPONDED=TRUE; 
  }
}
# -----------------------------------
# DROP ACTION: DROP AN OBJECT
# -----------------------------------
DATA DONT_HAVE "YOU DON'T HAVE IT.";
DATA DROPPED "DROPPED";

FN DROP_ACTION() {
  IF (INV_IDX=OBJ_NONE)
    PRINT_WORDS(DONT_HAVE);
  ELSE {
    PRINT_STRING(DROPPED);
    REMOVE_FROM_INV();
    ADD_OBJ_TO_RM();
  }
  SET RESPONDED=TRUE; 
}
# -----------------------------------
# PRINT OBJECT NAME
# -----------------------------------
FN PRINT_OBJ_NAME(OBJ:1) {
  IF (OBJ_NAMES[4*OBJ,2][0,1]>0) {
    PRINT_STRING(OBJ_NAMES[4*OBJ,2]);
    PRINT_CHAR(' ');
  }
  PRINT_STRING(OBJ_NAMES[4*OBJ+2,2]);
}
