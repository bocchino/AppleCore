# -----------------------------------
# BELOW THE BASEMENT: ROOM ACCESS
# -----------------------------------
# DIRECTION CONSTANTS
# -----------------------------------
CONST NORTH 0;
CONST SOUTH 1;
CONST EAST  2;
CONST WEST  3;
CONST UP    4;
CONST DOWN  5;
# -----------------------------------
# ROOM IDENTIFIERS
# -----------------------------------
CONST RM_BASEMENT   0;
CONST RM_FEATHERS   1;
CONST RM_RUBBER     2;
CONST RM_CLOSET     3;
CONST RM_MUDDY      4;
CONST RM_BRIGHT     5;
CONST RM_RESERVOIR  6;
CONST RM_BANK       7;
CONST RM_FOYER      8;
CONST RM_DARK       9;
CONST RM_BARE       10;
CONST RM_JAIL       11;
CONST RM_GREASY     12;
CONST RM_BEAR       13;
CONST RM_HOT        14;
CONST RM_PIT_EDGE   15;
CONST RM_PIT_BOTTOM 16;
CONST RM_WIN        17;

CONST RM_TAKEN      -1;
CONST RM_NONE       -1;
# -----------------------------------
# EXTERN VARIABLE DECLARATION
# -----------------------------------
FN RMS_START();
# -----------------------------------
# LOAD MODULE FOR ROOM
# -----------------------------------
DATA RMS_STR "ROOMS.";

FN LOAD_RM_MODULE_FOR(RM:1) {
  SET_MODULE_TO(RM);
  IF (NOT (GET_RM_MODULE()=MODULE)) {
    SET FILE_NAME=0;
    SET (@FILE_NAME)[0,6]=RMS_STR[0,6];
    NUM_TO_STR(@MODULE,1,10,@FILE_NAME+6);
    SET (@FILE_NAME)[7,4]=OBJ_STR[0,4];
    ISSUE_DOS_CMD(DOS_BLOAD,@FILE_NAME);
  }
}
# -----------------------------------
# GET CURRENT ROOM MODULE
# -----------------------------------
FN:1 GET_RM_MODULE() {
  RETURN RM_MODULE[0,1];
}
# -----------------------------------
# PRINT ROOM DESCRIPTION
# -----------------------------------
DATA SEPARATOR "\$0D----------------------------------------\$08";

FN PRINT_RM(RM:1) {
  VAR RM_NAME:2;
  VAR RM_DESC:2;
  LOAD_RM_MODULE_FOR(RM);
  SET RM_NAME=RM_NAMES[2*OFFSET,2];
  SET RM_DESC=RM_DESCS[2*OFFSET,2];
  MON_HOME();
  INVERSE();
  PRINT_STRING(RM_NAME);
  NORMAL();
  MON_CROUT();
  MON_CROUT();
  RM_DESC();
  MON_CROUT();
  PRINT_RM_OBJS(CURRENT_RM);
  PRINT_STRING(SEPARATOR);
}

DATA TODO "TODO";

FN RM_TODO() {
  PRINT_STRING(TODO);
}
# -----------------------------------
# GET ROOM EXIT
# -----------------------------------
FN:1 RM_EXIT(RM:1,DIR:1) {
  # HANDLE SPECIAL CASES
  IF (RM=RM_BASEMENT AND DIR=DOWN AND NOT USED_SWITCH)
    RETURN RM_NONE;
  LOAD_RM_MODULE_FOR(RM);
  RETURN RM_EXITS[6*OFFSET+DIR,1];
}
# -----------------------------------
# PRINT ROOM OBJECTS
# -----------------------------------
DATA VIS_ITEMS "\$0DVISIBLE ITEMS: ";

FN PRINT_RM_OBJS(RM:1) {
  VAR I:1=0;
  VAR OBJ:1;
  VAR RM_OBJ_PTR:2=
    RM_OBJS+RM*RM_OBJ_LIST_SIZE;
  VAR LEN:1=RM_OBJ_PTR[0,1];
  WHILE (I<LEN) {
    SET OBJ=RM_OBJ_PTR[I+1,1];
    IF (I=0) PRINT_STRING(VIS_ITEMS);
    POSITION_CURSOR(15, MON_CV[0,1]);
    PRINT_OBJ_NAME(OBJ);
    MON_CROUT();
    INCR I;
  }
}
# -----------------------------------
# PRINT ROOM HELP
# -----------------------------------
FN PRINT_HELP(RM:1) {
  VAR HELP:2;
  LOAD_RM_MODULE_FOR(RM);
  SET HELP=RM_HELP[2*OFFSET,2];
  PRINT_WORDS(HELP);
}
# -----------------------------------
# SET POINTER TO ROOM LIST
# -----------------------------------
VAR RM_LIST_LEN:1;
VAR RM_LIST_PTR:2;

FN SET_RM_LIST_PTR() {
  SET RM_LIST_PTR=
    RM_OBJS+RM_OBJ_LIST_SIZE*CURRENT_RM;
  SET RM_LIST_LEN=RM_LIST_PTR[0,1];
}
# -----------------------------------
# FIND OBJECT IN ROOM BY NAME
# -----------------------------------
VAR RM_LIST_IDX:1;

FN:1 FIND_OBJ_IN_RM(OBJ:2) {
  VAR OBJ_ID:1;
  VAR NAME_PTR:2;
  SET_RM_LIST_PTR();
  SET RM_LIST_IDX=0;
  WHILE (RM_LIST_IDX < RM_LIST_LEN) {
    SET OBJ_ID=
      RM_LIST_PTR[RM_LIST_IDX+1,1];
    SET NAME_PTR=OBJ_NAMES+4*OBJ_ID;
    IF ((NOT CMP_STRING(OBJ,NAME_PTR[0,2]))
      OR (NOT CMP_STRING(OBJ,NAME_PTR[2,2])))
        RETURN OBJ_ID;
    INCR RM_LIST_IDX;
  }  
  SET RM_LIST_IDX=$FF;
  RETURN OBJ_NONE;
}
# -----------------------------------
# FIND OBJECT IN ROOM BY ID
# -----------------------------------
FN:1 FIND_OBJ_ID_IN_RM(OBJ_ID:1) {
  SET_RM_LIST_PTR();
  SET RM_LIST_IDX=0;
  WHILE (RM_LIST_IDX < RM_LIST_LEN) {
    IF (RM_LIST_PTR[RM_LIST_IDX+1,1]=OBJ_ID)
      RETURN TRUE;
    INCR RM_LIST_IDX;
  }
  RETURN FALSE;
}
# -----------------------------------
# REMOVE OBJECT FROM ROOM
# -----------------------------------
FN REMOVE_OBJ_FROM_RM() {
  SET RM_LIST_PTR[RM_LIST_IDX+1,1]=
    RM_LIST_PTR[RM_LIST_LEN,1];
  DECR RM_LIST_PTR[0,1];
}
# -----------------------------------
# ADD OBJECT TO ROOM
# -----------------------------------
FN:1 ADD_OBJ_TO_RM() {
  SET_RM_LIST_PTR();
  IF (RM_LIST_LEN=RM_OBJ_LIST_SIZE-1)
    RETURN FALSE;
  SET RM_LIST_PTR[RM_LIST_LEN+1,1]=
    OBJ_ID;
  INCR RM_LIST_PTR[0,1];
  RETURN TRUE;
}
