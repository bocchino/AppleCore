# -----------------------------------
# MASTERMIND, PART 1
# -----------------------------------
# NUMBER OF COLORS TO CHOOSE FROM
CONST NUM_COLORS  8;
# NUMBER OF COLORS IN CODE
CONST CODE_SIZE   5;
# -----------------------------------
# COLOR INFO
# -----------------------------------
DATA COLORS DARK_BLUE;
DATA        LIGHT_GREEN;
DATA	    RED;
DATA	    YELLOW;
DATA	    VIOLET;
DATA	    ORANGE;
DATA	    WHITE;
DATA	    DARK_GREY;

DATA NO_GUESS -1;
DATA NO_CODE  -2;

DATA COLOR_NAMES "BGRYVOWX"\;
# -----------------------------------
# STATE VARIABLES
# -----------------------------------
# SHOULD WE QUIT THE GAME?
VAR DONE_GAME:1=FALSE;
# CODE TO BE GUESSED
VAR CODE:5;
# USER GUESSES
VAR GUESSES:5;
# COUNT NUMBER OF USER TRIES
VAR TRY:1;
# ARE WE DONE WITH THE ROUND?
VAR DONE_ROUND:1;
# X AND Y CURSOR POSITION
VAR XPOS:1;
VAR YPOS:1;
# WHETHER THE USER ENTERED THE LINE
VAR LINE_ENTERED:1;
# -----------------------------------
# INTRO SCREEN
# -----------------------------------
DATA WELCOME "WELCOME TO THE GAME OF MASTERMIND!";
DATA RULES   "\$0D\$0DYOUR OBJECT IS TO GUESS FIVE COLORS (WHICH I WILL MAKE UP) IN THE MINIMUM NUMBER OF GUESSES.  YOU'LL ENTER ONE GUESS ON EACH LINE.  AFTER YOU ENTER EACH GUESS, I'LL PROVIDE SOME FEEDBACK:\$0D\$0D"\;
DATA	     "- EACH WHITE SQUARE MEANS A CORRECT COLOR IN THE CORRECT POSITION\$0D\$0D"\;
DATA	     "- EACH GREY SQUARE MEANS A CORRECT COLOR IN THE WRONG POSITION\$0D\$0D"\;
DATA         "WHEN YOU'VE GOT IT RIGHT, I'LL RATE YOUR PERFORMANCE (EXCELLENT, GOOD, AVERAGE, OR POOR).  GOOD LUCK!\$0D\$0D";

DATA BEGIN   "PRESS ANY KEY TO BEGIN PLAY";

FN INTRO() {
  SET_SWITCH(TEXT);
  MON_HOME();
  MON_CROUT();
  SET MON_CH[0,1]=3;
  INVERSE();
  PRINT_STRING(WELCOME);  
  NORMAL();
  PRINT_WORDS(RULES);
  INVERSE();
  SET MON_CH[0,1]=6;
  PRINT_STRING(BEGIN);
  NORMAL();
}
# -----------------------------------
# INITIALIZE A ROUND
# -----------------------------------
FN INIT_ROUND() {
  VAR I:1=0;
  # 16 RANDOM BITS FROM KEYBOARD
  VAR BITS:2=MON_RNDL[0,2];
  DRAW_BOARD();
  SET TRY=0;  
  SET DONE_ROUND=FALSE;
  # INIT PEG COLORS
  WHILE (I<CODE_SIZE) {
    SET (@CODE)[I,1]=COLORS[MON_RNDL[0,1] AND 7,1];
    SET MON_RNDL[0,2]=MON_RNDL[0,2]>>3;
    INCR I;
  }
}
# -----------------------------------
# DRAW THE GAME BOARD
# -----------------------------------
DATA INSTRUCTIONS "LETTER KEYS AND ARROWS: CHANGE COLORS\$0D"\;
DATA              "RETURN: ACCEPT GUESS #\$0D"\;
DATA              "ESC: QUIT";

DATA SPACES "   ";

FN DRAW_BOARD() {
  VAR I:1=0;
  MON_HOME();
  SET_SWITCH(GRAPHICS);
  SET_SWITCH(LO_RES);
  SET_SWITCH(TEXT_WINDOW);
  MON_CLRTOP();
  POSITION_CURSOR(0,20);
  WHILE (I<NUM_COLORS) {
    SET_COLOR(COLORS[I,1]);
    HLINE(I*4+2,I*4+4,39);
    PRINT_STRING(SPACES);
    PRINT_CHAR(COLOR_NAMES[I,1]);
    INCR I;
  }  
  POSITION_CURSOR(0,21);
  PRINT_STRING(INSTRUCTIONS);
}
# -----------------------------------
# PLAY A ROUND OF THE GAME
# -----------------------------------
FN PLAY_ROUND() {
  VAR I:1=0;
  # SET DEFAULT GUESS TO DARK GREY
  WHILE (I<CODE_SIZE) {
    SET (@GUESSES)[I,1]=DARK_GREY;
    INCR I;
  }
  WHILE (NOT DONE_ROUND) {
    INCR TRY;
    POSITION_CURSOR(22,22);
    PRINT_TRY();
    SET YPOS=TRY*2-36*(TRY*2/36);
    DISPLAY_GUESSES();
    FLASH_CURSOR();
    IF (NOT DONE_GAME) 
      GIVE_FEEDBACK();
  }
}
# -----------------------------------
# DISPLAY USER GUESSES
# -----------------------------------
FN DISPLAY_GUESSES() {
  VAR I:1=0;
  SET_COLOR(BLACK);
  HLINE(0,39,YPOS);
  WHILE (I<CODE_SIZE) {
    DISPLAY_GUESS(I,YPOS,(@GUESSES)[I,1]);
    INCR I;
  }
}
FN DISPLAY_GUESS(X:1,Y:1,COLOR:1) {
  SET_COLOR(COLOR);
  HLINE(X*4+2,X*4+4,Y);
}
# -----------------------------------
# FLASH CURSOR AND PROCESS INPUT
# -----------------------------------
CONST CURSOR_INTERVAL 50;

FN FLASH_CURSOR() {
  VAR COLOR:1=BLACK;
  SET LINE_ENTERED=FALSE;
  SET XPOS=0;
  WHILE (NOT LINE_ENTERED) {
    DISPLAY_GUESS(XPOS,YPOS,COLOR);
    GET_INPUT();
    IF (COLOR=BLACK) {
      SET COLOR=(@GUESSES)[XPOS,1];
    }
    ELSE SET COLOR=BLACK;
  }
}

FN GET_INPUT() {
  VAR I:1=0;
  VAR CHAR:1;
  WHILE (I<CURSOR_INTERVAL) {
    SET CHAR=READ_KBD();
    IF (CHAR > $7F) {
      PROCESS_CHAR(CHAR);
      RETURN;
    }
    INCR I;
  }
}
